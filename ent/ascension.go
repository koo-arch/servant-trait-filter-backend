// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/koo-arch/servant-trait-filter-backend/ent/ascension"
	"github.com/koo-arch/servant-trait-filter-backend/ent/attribute"
	"github.com/koo-arch/servant-trait-filter-backend/ent/moralalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/servant"
)

// Ascension is the model entity for the Ascension schema.
type Ascension struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ServantID holds the value of the "servant_id" field.
	ServantID int `json:"servant_id,omitempty"`
	// Stage holds the value of the "stage" field.
	Stage int `json:"stage,omitempty"`
	// AttributeID holds the value of the "attribute_id" field.
	AttributeID int `json:"attribute_id,omitempty"`
	// OrderAlignmentID holds the value of the "order_alignment_id" field.
	OrderAlignmentID int `json:"order_alignment_id,omitempty"`
	// MoralAlignmentID holds the value of the "moral_alignment_id" field.
	MoralAlignmentID int `json:"moral_alignment_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AscensionQuery when eager-loading is set.
	Edges        AscensionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AscensionEdges holds the relations/edges for other nodes in the graph.
type AscensionEdges struct {
	// Servant holds the value of the servant edge.
	Servant *Servant `json:"servant,omitempty"`
	// Attribute holds the value of the attribute edge.
	Attribute *Attribute `json:"attribute,omitempty"`
	// OrderAlignment holds the value of the order_alignment edge.
	OrderAlignment *OrderAlignment `json:"order_alignment,omitempty"`
	// MoralAlignment holds the value of the moral_alignment edge.
	MoralAlignment *MoralAlignment `json:"moral_alignment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ServantOrErr returns the Servant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AscensionEdges) ServantOrErr() (*Servant, error) {
	if e.Servant != nil {
		return e.Servant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: servant.Label}
	}
	return nil, &NotLoadedError{edge: "servant"}
}

// AttributeOrErr returns the Attribute value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AscensionEdges) AttributeOrErr() (*Attribute, error) {
	if e.Attribute != nil {
		return e.Attribute, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: attribute.Label}
	}
	return nil, &NotLoadedError{edge: "attribute"}
}

// OrderAlignmentOrErr returns the OrderAlignment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AscensionEdges) OrderAlignmentOrErr() (*OrderAlignment, error) {
	if e.OrderAlignment != nil {
		return e.OrderAlignment, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: orderalignment.Label}
	}
	return nil, &NotLoadedError{edge: "order_alignment"}
}

// MoralAlignmentOrErr returns the MoralAlignment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AscensionEdges) MoralAlignmentOrErr() (*MoralAlignment, error) {
	if e.MoralAlignment != nil {
		return e.MoralAlignment, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: moralalignment.Label}
	}
	return nil, &NotLoadedError{edge: "moral_alignment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ascension) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ascension.FieldID, ascension.FieldServantID, ascension.FieldStage, ascension.FieldAttributeID, ascension.FieldOrderAlignmentID, ascension.FieldMoralAlignmentID:
			values[i] = new(sql.NullInt64)
		case ascension.FieldCreatedAt, ascension.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ascension fields.
func (a *Ascension) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ascension.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case ascension.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case ascension.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case ascension.FieldServantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field servant_id", values[i])
			} else if value.Valid {
				a.ServantID = int(value.Int64)
			}
		case ascension.FieldStage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stage", values[i])
			} else if value.Valid {
				a.Stage = int(value.Int64)
			}
		case ascension.FieldAttributeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_id", values[i])
			} else if value.Valid {
				a.AttributeID = int(value.Int64)
			}
		case ascension.FieldOrderAlignmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_alignment_id", values[i])
			} else if value.Valid {
				a.OrderAlignmentID = int(value.Int64)
			}
		case ascension.FieldMoralAlignmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field moral_alignment_id", values[i])
			} else if value.Valid {
				a.MoralAlignmentID = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ascension.
// This includes values selected through modifiers, order, etc.
func (a *Ascension) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryServant queries the "servant" edge of the Ascension entity.
func (a *Ascension) QueryServant() *ServantQuery {
	return NewAscensionClient(a.config).QueryServant(a)
}

// QueryAttribute queries the "attribute" edge of the Ascension entity.
func (a *Ascension) QueryAttribute() *AttributeQuery {
	return NewAscensionClient(a.config).QueryAttribute(a)
}

// QueryOrderAlignment queries the "order_alignment" edge of the Ascension entity.
func (a *Ascension) QueryOrderAlignment() *OrderAlignmentQuery {
	return NewAscensionClient(a.config).QueryOrderAlignment(a)
}

// QueryMoralAlignment queries the "moral_alignment" edge of the Ascension entity.
func (a *Ascension) QueryMoralAlignment() *MoralAlignmentQuery {
	return NewAscensionClient(a.config).QueryMoralAlignment(a)
}

// Update returns a builder for updating this Ascension.
// Note that you need to call Ascension.Unwrap() before calling this method if this Ascension
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Ascension) Update() *AscensionUpdateOne {
	return NewAscensionClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Ascension entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Ascension) Unwrap() *Ascension {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ascension is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Ascension) String() string {
	var builder strings.Builder
	builder.WriteString("Ascension(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("servant_id=")
	builder.WriteString(fmt.Sprintf("%v", a.ServantID))
	builder.WriteString(", ")
	builder.WriteString("stage=")
	builder.WriteString(fmt.Sprintf("%v", a.Stage))
	builder.WriteString(", ")
	builder.WriteString("attribute_id=")
	builder.WriteString(fmt.Sprintf("%v", a.AttributeID))
	builder.WriteString(", ")
	builder.WriteString("order_alignment_id=")
	builder.WriteString(fmt.Sprintf("%v", a.OrderAlignmentID))
	builder.WriteString(", ")
	builder.WriteString("moral_alignment_id=")
	builder.WriteString(fmt.Sprintf("%v", a.MoralAlignmentID))
	builder.WriteByte(')')
	return builder.String()
}

// Ascensions is a parsable slice of Ascension.
type Ascensions []*Ascension
