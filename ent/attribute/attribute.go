// Code generated by ent, DO NOT EDIT.

package attribute

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the attribute type in the database.
	Label = "attribute"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldNameEn holds the string denoting the name_en field in the database.
	FieldNameEn = "name_en"
	// FieldNameJa holds the string denoting the name_ja field in the database.
	FieldNameJa = "name_ja"
	// EdgeServants holds the string denoting the servants edge name in mutations.
	EdgeServants = "servants"
	// Table holds the table name of the attribute in the database.
	Table = "attributes"
	// ServantsTable is the table that holds the servants relation/edge.
	ServantsTable = "servants"
	// ServantsInverseTable is the table name for the Servant entity.
	// It exists in this package in order to avoid circular dependency with the "servant" package.
	ServantsInverseTable = "servants"
	// ServantsColumn is the table column denoting the servants relation/edge.
	ServantsColumn = "attribute_servants"
)

// Columns holds all SQL columns for attribute fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldNameEn,
	FieldNameJa,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameEnValidator is a validator for the "name_en" field. It is called by the builders before save.
	NameEnValidator func(string) error
)

// OrderOption defines the ordering options for the Attribute queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByNameEn orders the results by the name_en field.
func ByNameEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameEn, opts...).ToFunc()
}

// ByNameJa orders the results by the name_ja field.
func ByNameJa(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameJa, opts...).ToFunc()
}

// ByServantsCount orders the results by servants count.
func ByServantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServantsStep(), opts...)
	}
}

// ByServants orders the results by servants terms.
func ByServants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newServantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServantsTable, ServantsColumn),
	)
}
