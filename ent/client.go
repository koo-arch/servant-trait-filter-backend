// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/koo-arch/servant-trait-filter-backend/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/koo-arch/servant-trait-filter-backend/ent/attribute"
	"github.com/koo-arch/servant-trait-filter-backend/ent/class"
	"github.com/koo-arch/servant-trait-filter-backend/ent/moralalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/servant"
	"github.com/koo-arch/servant-trait-filter-backend/ent/trait"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Attribute is the client for interacting with the Attribute builders.
	Attribute *AttributeClient
	// Class is the client for interacting with the Class builders.
	Class *ClassClient
	// MoralAlignment is the client for interacting with the MoralAlignment builders.
	MoralAlignment *MoralAlignmentClient
	// OrderAlignment is the client for interacting with the OrderAlignment builders.
	OrderAlignment *OrderAlignmentClient
	// Servant is the client for interacting with the Servant builders.
	Servant *ServantClient
	// Trait is the client for interacting with the Trait builders.
	Trait *TraitClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Attribute = NewAttributeClient(c.config)
	c.Class = NewClassClient(c.config)
	c.MoralAlignment = NewMoralAlignmentClient(c.config)
	c.OrderAlignment = NewOrderAlignmentClient(c.config)
	c.Servant = NewServantClient(c.config)
	c.Trait = NewTraitClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Attribute:      NewAttributeClient(cfg),
		Class:          NewClassClient(cfg),
		MoralAlignment: NewMoralAlignmentClient(cfg),
		OrderAlignment: NewOrderAlignmentClient(cfg),
		Servant:        NewServantClient(cfg),
		Trait:          NewTraitClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Attribute:      NewAttributeClient(cfg),
		Class:          NewClassClient(cfg),
		MoralAlignment: NewMoralAlignmentClient(cfg),
		OrderAlignment: NewOrderAlignmentClient(cfg),
		Servant:        NewServantClient(cfg),
		Trait:          NewTraitClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Attribute.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Attribute, c.Class, c.MoralAlignment, c.OrderAlignment, c.Servant, c.Trait,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Attribute, c.Class, c.MoralAlignment, c.OrderAlignment, c.Servant, c.Trait,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AttributeMutation:
		return c.Attribute.mutate(ctx, m)
	case *ClassMutation:
		return c.Class.mutate(ctx, m)
	case *MoralAlignmentMutation:
		return c.MoralAlignment.mutate(ctx, m)
	case *OrderAlignmentMutation:
		return c.OrderAlignment.mutate(ctx, m)
	case *ServantMutation:
		return c.Servant.mutate(ctx, m)
	case *TraitMutation:
		return c.Trait.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AttributeClient is a client for the Attribute schema.
type AttributeClient struct {
	config
}

// NewAttributeClient returns a client for the Attribute from the given config.
func NewAttributeClient(c config) *AttributeClient {
	return &AttributeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attribute.Hooks(f(g(h())))`.
func (c *AttributeClient) Use(hooks ...Hook) {
	c.hooks.Attribute = append(c.hooks.Attribute, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attribute.Intercept(f(g(h())))`.
func (c *AttributeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Attribute = append(c.inters.Attribute, interceptors...)
}

// Create returns a builder for creating a Attribute entity.
func (c *AttributeClient) Create() *AttributeCreate {
	mutation := newAttributeMutation(c.config, OpCreate)
	return &AttributeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attribute entities.
func (c *AttributeClient) CreateBulk(builders ...*AttributeCreate) *AttributeCreateBulk {
	return &AttributeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttributeClient) MapCreateBulk(slice any, setFunc func(*AttributeCreate, int)) *AttributeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttributeCreateBulk{err: fmt.Errorf("calling to AttributeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttributeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttributeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attribute.
func (c *AttributeClient) Update() *AttributeUpdate {
	mutation := newAttributeMutation(c.config, OpUpdate)
	return &AttributeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttributeClient) UpdateOne(a *Attribute) *AttributeUpdateOne {
	mutation := newAttributeMutation(c.config, OpUpdateOne, withAttribute(a))
	return &AttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttributeClient) UpdateOneID(id int) *AttributeUpdateOne {
	mutation := newAttributeMutation(c.config, OpUpdateOne, withAttributeID(id))
	return &AttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attribute.
func (c *AttributeClient) Delete() *AttributeDelete {
	mutation := newAttributeMutation(c.config, OpDelete)
	return &AttributeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttributeClient) DeleteOne(a *Attribute) *AttributeDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttributeClient) DeleteOneID(id int) *AttributeDeleteOne {
	builder := c.Delete().Where(attribute.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttributeDeleteOne{builder}
}

// Query returns a query builder for Attribute.
func (c *AttributeClient) Query() *AttributeQuery {
	return &AttributeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttribute},
		inters: c.Interceptors(),
	}
}

// Get returns a Attribute entity by its id.
func (c *AttributeClient) Get(ctx context.Context, id int) (*Attribute, error) {
	return c.Query().Where(attribute.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttributeClient) GetX(ctx context.Context, id int) *Attribute {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServants queries the servants edge of a Attribute.
func (c *AttributeClient) QueryServants(a *Attribute) *ServantQuery {
	query := (&ServantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attribute.Table, attribute.FieldID, id),
			sqlgraph.To(servant.Table, servant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attribute.ServantsTable, attribute.ServantsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttributeClient) Hooks() []Hook {
	return c.hooks.Attribute
}

// Interceptors returns the client interceptors.
func (c *AttributeClient) Interceptors() []Interceptor {
	return c.inters.Attribute
}

func (c *AttributeClient) mutate(ctx context.Context, m *AttributeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttributeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttributeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttributeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Attribute mutation op: %q", m.Op())
	}
}

// ClassClient is a client for the Class schema.
type ClassClient struct {
	config
}

// NewClassClient returns a client for the Class from the given config.
func NewClassClient(c config) *ClassClient {
	return &ClassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `class.Hooks(f(g(h())))`.
func (c *ClassClient) Use(hooks ...Hook) {
	c.hooks.Class = append(c.hooks.Class, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `class.Intercept(f(g(h())))`.
func (c *ClassClient) Intercept(interceptors ...Interceptor) {
	c.inters.Class = append(c.inters.Class, interceptors...)
}

// Create returns a builder for creating a Class entity.
func (c *ClassClient) Create() *ClassCreate {
	mutation := newClassMutation(c.config, OpCreate)
	return &ClassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Class entities.
func (c *ClassClient) CreateBulk(builders ...*ClassCreate) *ClassCreateBulk {
	return &ClassCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClassClient) MapCreateBulk(slice any, setFunc func(*ClassCreate, int)) *ClassCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClassCreateBulk{err: fmt.Errorf("calling to ClassClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClassCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Class.
func (c *ClassClient) Update() *ClassUpdate {
	mutation := newClassMutation(c.config, OpUpdate)
	return &ClassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClassClient) UpdateOne(cl *Class) *ClassUpdateOne {
	mutation := newClassMutation(c.config, OpUpdateOne, withClass(cl))
	return &ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClassClient) UpdateOneID(id int) *ClassUpdateOne {
	mutation := newClassMutation(c.config, OpUpdateOne, withClassID(id))
	return &ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Class.
func (c *ClassClient) Delete() *ClassDelete {
	mutation := newClassMutation(c.config, OpDelete)
	return &ClassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClassClient) DeleteOne(cl *Class) *ClassDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClassClient) DeleteOneID(id int) *ClassDeleteOne {
	builder := c.Delete().Where(class.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClassDeleteOne{builder}
}

// Query returns a query builder for Class.
func (c *ClassClient) Query() *ClassQuery {
	return &ClassQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClass},
		inters: c.Interceptors(),
	}
}

// Get returns a Class entity by its id.
func (c *ClassClient) Get(ctx context.Context, id int) (*Class, error) {
	return c.Query().Where(class.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClassClient) GetX(ctx context.Context, id int) *Class {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServants queries the servants edge of a Class.
func (c *ClassClient) QueryServants(cl *Class) *ServantQuery {
	query := (&ServantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(servant.Table, servant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, class.ServantsTable, class.ServantsColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClassClient) Hooks() []Hook {
	return c.hooks.Class
}

// Interceptors returns the client interceptors.
func (c *ClassClient) Interceptors() []Interceptor {
	return c.inters.Class
}

func (c *ClassClient) mutate(ctx context.Context, m *ClassMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClassCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClassUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClassDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Class mutation op: %q", m.Op())
	}
}

// MoralAlignmentClient is a client for the MoralAlignment schema.
type MoralAlignmentClient struct {
	config
}

// NewMoralAlignmentClient returns a client for the MoralAlignment from the given config.
func NewMoralAlignmentClient(c config) *MoralAlignmentClient {
	return &MoralAlignmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `moralalignment.Hooks(f(g(h())))`.
func (c *MoralAlignmentClient) Use(hooks ...Hook) {
	c.hooks.MoralAlignment = append(c.hooks.MoralAlignment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `moralalignment.Intercept(f(g(h())))`.
func (c *MoralAlignmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.MoralAlignment = append(c.inters.MoralAlignment, interceptors...)
}

// Create returns a builder for creating a MoralAlignment entity.
func (c *MoralAlignmentClient) Create() *MoralAlignmentCreate {
	mutation := newMoralAlignmentMutation(c.config, OpCreate)
	return &MoralAlignmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MoralAlignment entities.
func (c *MoralAlignmentClient) CreateBulk(builders ...*MoralAlignmentCreate) *MoralAlignmentCreateBulk {
	return &MoralAlignmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MoralAlignmentClient) MapCreateBulk(slice any, setFunc func(*MoralAlignmentCreate, int)) *MoralAlignmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MoralAlignmentCreateBulk{err: fmt.Errorf("calling to MoralAlignmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MoralAlignmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MoralAlignmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MoralAlignment.
func (c *MoralAlignmentClient) Update() *MoralAlignmentUpdate {
	mutation := newMoralAlignmentMutation(c.config, OpUpdate)
	return &MoralAlignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MoralAlignmentClient) UpdateOne(ma *MoralAlignment) *MoralAlignmentUpdateOne {
	mutation := newMoralAlignmentMutation(c.config, OpUpdateOne, withMoralAlignment(ma))
	return &MoralAlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MoralAlignmentClient) UpdateOneID(id int) *MoralAlignmentUpdateOne {
	mutation := newMoralAlignmentMutation(c.config, OpUpdateOne, withMoralAlignmentID(id))
	return &MoralAlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MoralAlignment.
func (c *MoralAlignmentClient) Delete() *MoralAlignmentDelete {
	mutation := newMoralAlignmentMutation(c.config, OpDelete)
	return &MoralAlignmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MoralAlignmentClient) DeleteOne(ma *MoralAlignment) *MoralAlignmentDeleteOne {
	return c.DeleteOneID(ma.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MoralAlignmentClient) DeleteOneID(id int) *MoralAlignmentDeleteOne {
	builder := c.Delete().Where(moralalignment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MoralAlignmentDeleteOne{builder}
}

// Query returns a query builder for MoralAlignment.
func (c *MoralAlignmentClient) Query() *MoralAlignmentQuery {
	return &MoralAlignmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMoralAlignment},
		inters: c.Interceptors(),
	}
}

// Get returns a MoralAlignment entity by its id.
func (c *MoralAlignmentClient) Get(ctx context.Context, id int) (*MoralAlignment, error) {
	return c.Query().Where(moralalignment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MoralAlignmentClient) GetX(ctx context.Context, id int) *MoralAlignment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServants queries the servants edge of a MoralAlignment.
func (c *MoralAlignmentClient) QueryServants(ma *MoralAlignment) *ServantQuery {
	query := (&ServantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moralalignment.Table, moralalignment.FieldID, id),
			sqlgraph.To(servant.Table, servant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, moralalignment.ServantsTable, moralalignment.ServantsColumn),
		)
		fromV = sqlgraph.Neighbors(ma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MoralAlignmentClient) Hooks() []Hook {
	return c.hooks.MoralAlignment
}

// Interceptors returns the client interceptors.
func (c *MoralAlignmentClient) Interceptors() []Interceptor {
	return c.inters.MoralAlignment
}

func (c *MoralAlignmentClient) mutate(ctx context.Context, m *MoralAlignmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MoralAlignmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MoralAlignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MoralAlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MoralAlignmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MoralAlignment mutation op: %q", m.Op())
	}
}

// OrderAlignmentClient is a client for the OrderAlignment schema.
type OrderAlignmentClient struct {
	config
}

// NewOrderAlignmentClient returns a client for the OrderAlignment from the given config.
func NewOrderAlignmentClient(c config) *OrderAlignmentClient {
	return &OrderAlignmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderalignment.Hooks(f(g(h())))`.
func (c *OrderAlignmentClient) Use(hooks ...Hook) {
	c.hooks.OrderAlignment = append(c.hooks.OrderAlignment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderalignment.Intercept(f(g(h())))`.
func (c *OrderAlignmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderAlignment = append(c.inters.OrderAlignment, interceptors...)
}

// Create returns a builder for creating a OrderAlignment entity.
func (c *OrderAlignmentClient) Create() *OrderAlignmentCreate {
	mutation := newOrderAlignmentMutation(c.config, OpCreate)
	return &OrderAlignmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderAlignment entities.
func (c *OrderAlignmentClient) CreateBulk(builders ...*OrderAlignmentCreate) *OrderAlignmentCreateBulk {
	return &OrderAlignmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderAlignmentClient) MapCreateBulk(slice any, setFunc func(*OrderAlignmentCreate, int)) *OrderAlignmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderAlignmentCreateBulk{err: fmt.Errorf("calling to OrderAlignmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderAlignmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderAlignmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderAlignment.
func (c *OrderAlignmentClient) Update() *OrderAlignmentUpdate {
	mutation := newOrderAlignmentMutation(c.config, OpUpdate)
	return &OrderAlignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderAlignmentClient) UpdateOne(oa *OrderAlignment) *OrderAlignmentUpdateOne {
	mutation := newOrderAlignmentMutation(c.config, OpUpdateOne, withOrderAlignment(oa))
	return &OrderAlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderAlignmentClient) UpdateOneID(id int) *OrderAlignmentUpdateOne {
	mutation := newOrderAlignmentMutation(c.config, OpUpdateOne, withOrderAlignmentID(id))
	return &OrderAlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderAlignment.
func (c *OrderAlignmentClient) Delete() *OrderAlignmentDelete {
	mutation := newOrderAlignmentMutation(c.config, OpDelete)
	return &OrderAlignmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderAlignmentClient) DeleteOne(oa *OrderAlignment) *OrderAlignmentDeleteOne {
	return c.DeleteOneID(oa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderAlignmentClient) DeleteOneID(id int) *OrderAlignmentDeleteOne {
	builder := c.Delete().Where(orderalignment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderAlignmentDeleteOne{builder}
}

// Query returns a query builder for OrderAlignment.
func (c *OrderAlignmentClient) Query() *OrderAlignmentQuery {
	return &OrderAlignmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderAlignment},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderAlignment entity by its id.
func (c *OrderAlignmentClient) Get(ctx context.Context, id int) (*OrderAlignment, error) {
	return c.Query().Where(orderalignment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderAlignmentClient) GetX(ctx context.Context, id int) *OrderAlignment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServants queries the servants edge of a OrderAlignment.
func (c *OrderAlignmentClient) QueryServants(oa *OrderAlignment) *ServantQuery {
	query := (&ServantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderalignment.Table, orderalignment.FieldID, id),
			sqlgraph.To(servant.Table, servant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderalignment.ServantsTable, orderalignment.ServantsColumn),
		)
		fromV = sqlgraph.Neighbors(oa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderAlignmentClient) Hooks() []Hook {
	return c.hooks.OrderAlignment
}

// Interceptors returns the client interceptors.
func (c *OrderAlignmentClient) Interceptors() []Interceptor {
	return c.inters.OrderAlignment
}

func (c *OrderAlignmentClient) mutate(ctx context.Context, m *OrderAlignmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderAlignmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderAlignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderAlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderAlignmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderAlignment mutation op: %q", m.Op())
	}
}

// ServantClient is a client for the Servant schema.
type ServantClient struct {
	config
}

// NewServantClient returns a client for the Servant from the given config.
func NewServantClient(c config) *ServantClient {
	return &ServantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servant.Hooks(f(g(h())))`.
func (c *ServantClient) Use(hooks ...Hook) {
	c.hooks.Servant = append(c.hooks.Servant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servant.Intercept(f(g(h())))`.
func (c *ServantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Servant = append(c.inters.Servant, interceptors...)
}

// Create returns a builder for creating a Servant entity.
func (c *ServantClient) Create() *ServantCreate {
	mutation := newServantMutation(c.config, OpCreate)
	return &ServantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Servant entities.
func (c *ServantClient) CreateBulk(builders ...*ServantCreate) *ServantCreateBulk {
	return &ServantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServantClient) MapCreateBulk(slice any, setFunc func(*ServantCreate, int)) *ServantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServantCreateBulk{err: fmt.Errorf("calling to ServantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Servant.
func (c *ServantClient) Update() *ServantUpdate {
	mutation := newServantMutation(c.config, OpUpdate)
	return &ServantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServantClient) UpdateOne(s *Servant) *ServantUpdateOne {
	mutation := newServantMutation(c.config, OpUpdateOne, withServant(s))
	return &ServantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServantClient) UpdateOneID(id int) *ServantUpdateOne {
	mutation := newServantMutation(c.config, OpUpdateOne, withServantID(id))
	return &ServantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Servant.
func (c *ServantClient) Delete() *ServantDelete {
	mutation := newServantMutation(c.config, OpDelete)
	return &ServantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServantClient) DeleteOne(s *Servant) *ServantDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServantClient) DeleteOneID(id int) *ServantDeleteOne {
	builder := c.Delete().Where(servant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServantDeleteOne{builder}
}

// Query returns a query builder for Servant.
func (c *ServantClient) Query() *ServantQuery {
	return &ServantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServant},
		inters: c.Interceptors(),
	}
}

// Get returns a Servant entity by its id.
func (c *ServantClient) Get(ctx context.Context, id int) (*Servant, error) {
	return c.Query().Where(servant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServantClient) GetX(ctx context.Context, id int) *Servant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClass queries the class edge of a Servant.
func (c *ServantClient) QueryClass(s *Servant) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servant.Table, servant.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servant.ClassTable, servant.ClassColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttribute queries the attribute edge of a Servant.
func (c *ServantClient) QueryAttribute(s *Servant) *AttributeQuery {
	query := (&AttributeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servant.Table, servant.FieldID, id),
			sqlgraph.To(attribute.Table, attribute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servant.AttributeTable, servant.AttributeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderAlignment queries the order_alignment edge of a Servant.
func (c *ServantClient) QueryOrderAlignment(s *Servant) *OrderAlignmentQuery {
	query := (&OrderAlignmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servant.Table, servant.FieldID, id),
			sqlgraph.To(orderalignment.Table, orderalignment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servant.OrderAlignmentTable, servant.OrderAlignmentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMoralAlignment queries the moral_alignment edge of a Servant.
func (c *ServantClient) QueryMoralAlignment(s *Servant) *MoralAlignmentQuery {
	query := (&MoralAlignmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servant.Table, servant.FieldID, id),
			sqlgraph.To(moralalignment.Table, moralalignment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servant.MoralAlignmentTable, servant.MoralAlignmentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTraits queries the traits edge of a Servant.
func (c *ServantClient) QueryTraits(s *Servant) *TraitQuery {
	query := (&TraitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servant.Table, servant.FieldID, id),
			sqlgraph.To(trait.Table, trait.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, servant.TraitsTable, servant.TraitsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServantClient) Hooks() []Hook {
	return c.hooks.Servant
}

// Interceptors returns the client interceptors.
func (c *ServantClient) Interceptors() []Interceptor {
	return c.inters.Servant
}

func (c *ServantClient) mutate(ctx context.Context, m *ServantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Servant mutation op: %q", m.Op())
	}
}

// TraitClient is a client for the Trait schema.
type TraitClient struct {
	config
}

// NewTraitClient returns a client for the Trait from the given config.
func NewTraitClient(c config) *TraitClient {
	return &TraitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trait.Hooks(f(g(h())))`.
func (c *TraitClient) Use(hooks ...Hook) {
	c.hooks.Trait = append(c.hooks.Trait, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trait.Intercept(f(g(h())))`.
func (c *TraitClient) Intercept(interceptors ...Interceptor) {
	c.inters.Trait = append(c.inters.Trait, interceptors...)
}

// Create returns a builder for creating a Trait entity.
func (c *TraitClient) Create() *TraitCreate {
	mutation := newTraitMutation(c.config, OpCreate)
	return &TraitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Trait entities.
func (c *TraitClient) CreateBulk(builders ...*TraitCreate) *TraitCreateBulk {
	return &TraitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TraitClient) MapCreateBulk(slice any, setFunc func(*TraitCreate, int)) *TraitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TraitCreateBulk{err: fmt.Errorf("calling to TraitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TraitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TraitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Trait.
func (c *TraitClient) Update() *TraitUpdate {
	mutation := newTraitMutation(c.config, OpUpdate)
	return &TraitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TraitClient) UpdateOne(t *Trait) *TraitUpdateOne {
	mutation := newTraitMutation(c.config, OpUpdateOne, withTrait(t))
	return &TraitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TraitClient) UpdateOneID(id int) *TraitUpdateOne {
	mutation := newTraitMutation(c.config, OpUpdateOne, withTraitID(id))
	return &TraitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Trait.
func (c *TraitClient) Delete() *TraitDelete {
	mutation := newTraitMutation(c.config, OpDelete)
	return &TraitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TraitClient) DeleteOne(t *Trait) *TraitDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TraitClient) DeleteOneID(id int) *TraitDeleteOne {
	builder := c.Delete().Where(trait.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TraitDeleteOne{builder}
}

// Query returns a query builder for Trait.
func (c *TraitClient) Query() *TraitQuery {
	return &TraitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrait},
		inters: c.Interceptors(),
	}
}

// Get returns a Trait entity by its id.
func (c *TraitClient) Get(ctx context.Context, id int) (*Trait, error) {
	return c.Query().Where(trait.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TraitClient) GetX(ctx context.Context, id int) *Trait {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServants queries the servants edge of a Trait.
func (c *TraitClient) QueryServants(t *Trait) *ServantQuery {
	query := (&ServantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trait.Table, trait.FieldID, id),
			sqlgraph.To(servant.Table, servant.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, trait.ServantsTable, trait.ServantsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TraitClient) Hooks() []Hook {
	return c.hooks.Trait
}

// Interceptors returns the client interceptors.
func (c *TraitClient) Interceptors() []Interceptor {
	return c.inters.Trait
}

func (c *TraitClient) mutate(ctx context.Context, m *TraitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TraitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TraitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TraitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TraitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Trait mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Attribute, Class, MoralAlignment, OrderAlignment, Servant, Trait []ent.Hook
	}
	inters struct {
		Attribute, Class, MoralAlignment, OrderAlignment, Servant,
		Trait []ent.Interceptor
	}
)
