// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/predicate"
	"github.com/koo-arch/servant-trait-filter-backend/ent/servant"
)

// OrderAlignmentUpdate is the builder for updating OrderAlignment entities.
type OrderAlignmentUpdate struct {
	config
	hooks    []Hook
	mutation *OrderAlignmentMutation
}

// Where appends a list predicates to the OrderAlignmentUpdate builder.
func (oau *OrderAlignmentUpdate) Where(ps ...predicate.OrderAlignment) *OrderAlignmentUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetUpdatedAt sets the "updated_at" field.
func (oau *OrderAlignmentUpdate) SetUpdatedAt(t time.Time) *OrderAlignmentUpdate {
	oau.mutation.SetUpdatedAt(t)
	return oau
}

// SetNameEn sets the "name_en" field.
func (oau *OrderAlignmentUpdate) SetNameEn(s string) *OrderAlignmentUpdate {
	oau.mutation.SetNameEn(s)
	return oau
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (oau *OrderAlignmentUpdate) SetNillableNameEn(s *string) *OrderAlignmentUpdate {
	if s != nil {
		oau.SetNameEn(*s)
	}
	return oau
}

// SetNameJa sets the "name_ja" field.
func (oau *OrderAlignmentUpdate) SetNameJa(s string) *OrderAlignmentUpdate {
	oau.mutation.SetNameJa(s)
	return oau
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (oau *OrderAlignmentUpdate) SetNillableNameJa(s *string) *OrderAlignmentUpdate {
	if s != nil {
		oau.SetNameJa(*s)
	}
	return oau
}

// AddServantIDs adds the "servants" edge to the Servant entity by IDs.
func (oau *OrderAlignmentUpdate) AddServantIDs(ids ...int) *OrderAlignmentUpdate {
	oau.mutation.AddServantIDs(ids...)
	return oau
}

// AddServants adds the "servants" edges to the Servant entity.
func (oau *OrderAlignmentUpdate) AddServants(s ...*Servant) *OrderAlignmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return oau.AddServantIDs(ids...)
}

// Mutation returns the OrderAlignmentMutation object of the builder.
func (oau *OrderAlignmentUpdate) Mutation() *OrderAlignmentMutation {
	return oau.mutation
}

// ClearServants clears all "servants" edges to the Servant entity.
func (oau *OrderAlignmentUpdate) ClearServants() *OrderAlignmentUpdate {
	oau.mutation.ClearServants()
	return oau
}

// RemoveServantIDs removes the "servants" edge to Servant entities by IDs.
func (oau *OrderAlignmentUpdate) RemoveServantIDs(ids ...int) *OrderAlignmentUpdate {
	oau.mutation.RemoveServantIDs(ids...)
	return oau
}

// RemoveServants removes "servants" edges to Servant entities.
func (oau *OrderAlignmentUpdate) RemoveServants(s ...*Servant) *OrderAlignmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return oau.RemoveServantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OrderAlignmentUpdate) Save(ctx context.Context) (int, error) {
	oau.defaults()
	return withHooks(ctx, oau.sqlSave, oau.mutation, oau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OrderAlignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OrderAlignmentUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OrderAlignmentUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oau *OrderAlignmentUpdate) defaults() {
	if _, ok := oau.mutation.UpdatedAt(); !ok {
		v := orderalignment.UpdateDefaultUpdatedAt()
		oau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oau *OrderAlignmentUpdate) check() error {
	if v, ok := oau.mutation.NameEn(); ok {
		if err := orderalignment.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "OrderAlignment.name_en": %w`, err)}
		}
	}
	return nil
}

func (oau *OrderAlignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderalignment.Table, orderalignment.Columns, sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt))
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.UpdatedAt(); ok {
		_spec.SetField(orderalignment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oau.mutation.NameEn(); ok {
		_spec.SetField(orderalignment.FieldNameEn, field.TypeString, value)
	}
	if value, ok := oau.mutation.NameJa(); ok {
		_spec.SetField(orderalignment.FieldNameJa, field.TypeString, value)
	}
	if oau.mutation.ServantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderalignment.ServantsTable,
			Columns: []string{orderalignment.ServantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.RemovedServantsIDs(); len(nodes) > 0 && !oau.mutation.ServantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderalignment.ServantsTable,
			Columns: []string{orderalignment.ServantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.ServantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderalignment.ServantsTable,
			Columns: []string{orderalignment.ServantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderalignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oau.mutation.done = true
	return n, nil
}

// OrderAlignmentUpdateOne is the builder for updating a single OrderAlignment entity.
type OrderAlignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderAlignmentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oauo *OrderAlignmentUpdateOne) SetUpdatedAt(t time.Time) *OrderAlignmentUpdateOne {
	oauo.mutation.SetUpdatedAt(t)
	return oauo
}

// SetNameEn sets the "name_en" field.
func (oauo *OrderAlignmentUpdateOne) SetNameEn(s string) *OrderAlignmentUpdateOne {
	oauo.mutation.SetNameEn(s)
	return oauo
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (oauo *OrderAlignmentUpdateOne) SetNillableNameEn(s *string) *OrderAlignmentUpdateOne {
	if s != nil {
		oauo.SetNameEn(*s)
	}
	return oauo
}

// SetNameJa sets the "name_ja" field.
func (oauo *OrderAlignmentUpdateOne) SetNameJa(s string) *OrderAlignmentUpdateOne {
	oauo.mutation.SetNameJa(s)
	return oauo
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (oauo *OrderAlignmentUpdateOne) SetNillableNameJa(s *string) *OrderAlignmentUpdateOne {
	if s != nil {
		oauo.SetNameJa(*s)
	}
	return oauo
}

// AddServantIDs adds the "servants" edge to the Servant entity by IDs.
func (oauo *OrderAlignmentUpdateOne) AddServantIDs(ids ...int) *OrderAlignmentUpdateOne {
	oauo.mutation.AddServantIDs(ids...)
	return oauo
}

// AddServants adds the "servants" edges to the Servant entity.
func (oauo *OrderAlignmentUpdateOne) AddServants(s ...*Servant) *OrderAlignmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return oauo.AddServantIDs(ids...)
}

// Mutation returns the OrderAlignmentMutation object of the builder.
func (oauo *OrderAlignmentUpdateOne) Mutation() *OrderAlignmentMutation {
	return oauo.mutation
}

// ClearServants clears all "servants" edges to the Servant entity.
func (oauo *OrderAlignmentUpdateOne) ClearServants() *OrderAlignmentUpdateOne {
	oauo.mutation.ClearServants()
	return oauo
}

// RemoveServantIDs removes the "servants" edge to Servant entities by IDs.
func (oauo *OrderAlignmentUpdateOne) RemoveServantIDs(ids ...int) *OrderAlignmentUpdateOne {
	oauo.mutation.RemoveServantIDs(ids...)
	return oauo
}

// RemoveServants removes "servants" edges to Servant entities.
func (oauo *OrderAlignmentUpdateOne) RemoveServants(s ...*Servant) *OrderAlignmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return oauo.RemoveServantIDs(ids...)
}

// Where appends a list predicates to the OrderAlignmentUpdate builder.
func (oauo *OrderAlignmentUpdateOne) Where(ps ...predicate.OrderAlignment) *OrderAlignmentUpdateOne {
	oauo.mutation.Where(ps...)
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OrderAlignmentUpdateOne) Select(field string, fields ...string) *OrderAlignmentUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OrderAlignment entity.
func (oauo *OrderAlignmentUpdateOne) Save(ctx context.Context) (*OrderAlignment, error) {
	oauo.defaults()
	return withHooks(ctx, oauo.sqlSave, oauo.mutation, oauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OrderAlignmentUpdateOne) SaveX(ctx context.Context) *OrderAlignment {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OrderAlignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OrderAlignmentUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oauo *OrderAlignmentUpdateOne) defaults() {
	if _, ok := oauo.mutation.UpdatedAt(); !ok {
		v := orderalignment.UpdateDefaultUpdatedAt()
		oauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oauo *OrderAlignmentUpdateOne) check() error {
	if v, ok := oauo.mutation.NameEn(); ok {
		if err := orderalignment.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "OrderAlignment.name_en": %w`, err)}
		}
	}
	return nil
}

func (oauo *OrderAlignmentUpdateOne) sqlSave(ctx context.Context) (_node *OrderAlignment, err error) {
	if err := oauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderalignment.Table, orderalignment.Columns, sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt))
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderAlignment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderalignment.FieldID)
		for _, f := range fields {
			if !orderalignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderalignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderalignment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oauo.mutation.NameEn(); ok {
		_spec.SetField(orderalignment.FieldNameEn, field.TypeString, value)
	}
	if value, ok := oauo.mutation.NameJa(); ok {
		_spec.SetField(orderalignment.FieldNameJa, field.TypeString, value)
	}
	if oauo.mutation.ServantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderalignment.ServantsTable,
			Columns: []string{orderalignment.ServantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.RemovedServantsIDs(); len(nodes) > 0 && !oauo.mutation.ServantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderalignment.ServantsTable,
			Columns: []string{orderalignment.ServantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.ServantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderalignment.ServantsTable,
			Columns: []string{orderalignment.ServantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderAlignment{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderalignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oauo.mutation.done = true
	return _node, nil
}
