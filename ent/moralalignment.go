// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/koo-arch/servant-trait-filter-backend/ent/moralalignment"
)

// MoralAlignment is the model entity for the MoralAlignment schema.
type MoralAlignment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// NameEn holds the value of the "name_en" field.
	NameEn string `json:"name_en,omitempty"`
	// NameJa holds the value of the "name_ja" field.
	NameJa string `json:"name_ja,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MoralAlignmentQuery when eager-loading is set.
	Edges        MoralAlignmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MoralAlignmentEdges holds the relations/edges for other nodes in the graph.
type MoralAlignmentEdges struct {
	// Ascensions holds the value of the ascensions edge.
	Ascensions []*Ascension `json:"ascensions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AscensionsOrErr returns the Ascensions value or an error if the edge
// was not loaded in eager-loading.
func (e MoralAlignmentEdges) AscensionsOrErr() ([]*Ascension, error) {
	if e.loadedTypes[0] {
		return e.Ascensions, nil
	}
	return nil, &NotLoadedError{edge: "ascensions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MoralAlignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case moralalignment.FieldID:
			values[i] = new(sql.NullInt64)
		case moralalignment.FieldNameEn, moralalignment.FieldNameJa:
			values[i] = new(sql.NullString)
		case moralalignment.FieldCreatedAt, moralalignment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MoralAlignment fields.
func (ma *MoralAlignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case moralalignment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ma.ID = int(value.Int64)
		case moralalignment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ma.CreatedAt = value.Time
			}
		case moralalignment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ma.UpdatedAt = value.Time
			}
		case moralalignment.FieldNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_en", values[i])
			} else if value.Valid {
				ma.NameEn = value.String
			}
		case moralalignment.FieldNameJa:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_ja", values[i])
			} else if value.Valid {
				ma.NameJa = value.String
			}
		default:
			ma.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MoralAlignment.
// This includes values selected through modifiers, order, etc.
func (ma *MoralAlignment) Value(name string) (ent.Value, error) {
	return ma.selectValues.Get(name)
}

// QueryAscensions queries the "ascensions" edge of the MoralAlignment entity.
func (ma *MoralAlignment) QueryAscensions() *AscensionQuery {
	return NewMoralAlignmentClient(ma.config).QueryAscensions(ma)
}

// Update returns a builder for updating this MoralAlignment.
// Note that you need to call MoralAlignment.Unwrap() before calling this method if this MoralAlignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ma *MoralAlignment) Update() *MoralAlignmentUpdateOne {
	return NewMoralAlignmentClient(ma.config).UpdateOne(ma)
}

// Unwrap unwraps the MoralAlignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ma *MoralAlignment) Unwrap() *MoralAlignment {
	_tx, ok := ma.config.driver.(*txDriver)
	if !ok {
		panic("ent: MoralAlignment is not a transactional entity")
	}
	ma.config.driver = _tx.drv
	return ma
}

// String implements the fmt.Stringer.
func (ma *MoralAlignment) String() string {
	var builder strings.Builder
	builder.WriteString("MoralAlignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ma.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ma.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ma.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name_en=")
	builder.WriteString(ma.NameEn)
	builder.WriteString(", ")
	builder.WriteString("name_ja=")
	builder.WriteString(ma.NameJa)
	builder.WriteByte(')')
	return builder.String()
}

// MoralAlignments is a parsable slice of MoralAlignment.
type MoralAlignments []*MoralAlignment
