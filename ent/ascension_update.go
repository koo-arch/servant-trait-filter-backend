// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koo-arch/servant-trait-filter-backend/ent/ascension"
	"github.com/koo-arch/servant-trait-filter-backend/ent/attribute"
	"github.com/koo-arch/servant-trait-filter-backend/ent/moralalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/predicate"
	"github.com/koo-arch/servant-trait-filter-backend/ent/servant"
)

// AscensionUpdate is the builder for updating Ascension entities.
type AscensionUpdate struct {
	config
	hooks    []Hook
	mutation *AscensionMutation
}

// Where appends a list predicates to the AscensionUpdate builder.
func (au *AscensionUpdate) Where(ps ...predicate.Ascension) *AscensionUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AscensionUpdate) SetUpdatedAt(t time.Time) *AscensionUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetServantID sets the "servant_id" field.
func (au *AscensionUpdate) SetServantID(i int) *AscensionUpdate {
	au.mutation.SetServantID(i)
	return au
}

// SetNillableServantID sets the "servant_id" field if the given value is not nil.
func (au *AscensionUpdate) SetNillableServantID(i *int) *AscensionUpdate {
	if i != nil {
		au.SetServantID(*i)
	}
	return au
}

// SetStage sets the "stage" field.
func (au *AscensionUpdate) SetStage(i int) *AscensionUpdate {
	au.mutation.ResetStage()
	au.mutation.SetStage(i)
	return au
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (au *AscensionUpdate) SetNillableStage(i *int) *AscensionUpdate {
	if i != nil {
		au.SetStage(*i)
	}
	return au
}

// AddStage adds i to the "stage" field.
func (au *AscensionUpdate) AddStage(i int) *AscensionUpdate {
	au.mutation.AddStage(i)
	return au
}

// SetAttributeID sets the "attribute_id" field.
func (au *AscensionUpdate) SetAttributeID(i int) *AscensionUpdate {
	au.mutation.SetAttributeID(i)
	return au
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (au *AscensionUpdate) SetNillableAttributeID(i *int) *AscensionUpdate {
	if i != nil {
		au.SetAttributeID(*i)
	}
	return au
}

// ClearAttributeID clears the value of the "attribute_id" field.
func (au *AscensionUpdate) ClearAttributeID() *AscensionUpdate {
	au.mutation.ClearAttributeID()
	return au
}

// SetOrderAlignmentID sets the "order_alignment_id" field.
func (au *AscensionUpdate) SetOrderAlignmentID(i int) *AscensionUpdate {
	au.mutation.SetOrderAlignmentID(i)
	return au
}

// SetNillableOrderAlignmentID sets the "order_alignment_id" field if the given value is not nil.
func (au *AscensionUpdate) SetNillableOrderAlignmentID(i *int) *AscensionUpdate {
	if i != nil {
		au.SetOrderAlignmentID(*i)
	}
	return au
}

// ClearOrderAlignmentID clears the value of the "order_alignment_id" field.
func (au *AscensionUpdate) ClearOrderAlignmentID() *AscensionUpdate {
	au.mutation.ClearOrderAlignmentID()
	return au
}

// SetMoralAlignmentID sets the "moral_alignment_id" field.
func (au *AscensionUpdate) SetMoralAlignmentID(i int) *AscensionUpdate {
	au.mutation.SetMoralAlignmentID(i)
	return au
}

// SetNillableMoralAlignmentID sets the "moral_alignment_id" field if the given value is not nil.
func (au *AscensionUpdate) SetNillableMoralAlignmentID(i *int) *AscensionUpdate {
	if i != nil {
		au.SetMoralAlignmentID(*i)
	}
	return au
}

// ClearMoralAlignmentID clears the value of the "moral_alignment_id" field.
func (au *AscensionUpdate) ClearMoralAlignmentID() *AscensionUpdate {
	au.mutation.ClearMoralAlignmentID()
	return au
}

// SetServant sets the "servant" edge to the Servant entity.
func (au *AscensionUpdate) SetServant(s *Servant) *AscensionUpdate {
	return au.SetServantID(s.ID)
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (au *AscensionUpdate) SetAttribute(a *Attribute) *AscensionUpdate {
	return au.SetAttributeID(a.ID)
}

// SetOrderAlignment sets the "order_alignment" edge to the OrderAlignment entity.
func (au *AscensionUpdate) SetOrderAlignment(o *OrderAlignment) *AscensionUpdate {
	return au.SetOrderAlignmentID(o.ID)
}

// SetMoralAlignment sets the "moral_alignment" edge to the MoralAlignment entity.
func (au *AscensionUpdate) SetMoralAlignment(m *MoralAlignment) *AscensionUpdate {
	return au.SetMoralAlignmentID(m.ID)
}

// Mutation returns the AscensionMutation object of the builder.
func (au *AscensionUpdate) Mutation() *AscensionMutation {
	return au.mutation
}

// ClearServant clears the "servant" edge to the Servant entity.
func (au *AscensionUpdate) ClearServant() *AscensionUpdate {
	au.mutation.ClearServant()
	return au
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (au *AscensionUpdate) ClearAttribute() *AscensionUpdate {
	au.mutation.ClearAttribute()
	return au
}

// ClearOrderAlignment clears the "order_alignment" edge to the OrderAlignment entity.
func (au *AscensionUpdate) ClearOrderAlignment() *AscensionUpdate {
	au.mutation.ClearOrderAlignment()
	return au
}

// ClearMoralAlignment clears the "moral_alignment" edge to the MoralAlignment entity.
func (au *AscensionUpdate) ClearMoralAlignment() *AscensionUpdate {
	au.mutation.ClearMoralAlignment()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AscensionUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AscensionUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AscensionUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AscensionUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AscensionUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := ascension.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AscensionUpdate) check() error {
	if v, ok := au.mutation.Stage(); ok {
		if err := ascension.StageValidator(v); err != nil {
			return &ValidationError{Name: "stage", err: fmt.Errorf(`ent: validator failed for field "Ascension.stage": %w`, err)}
		}
	}
	if v, ok := au.mutation.AttributeID(); ok {
		if err := ascension.AttributeIDValidator(v); err != nil {
			return &ValidationError{Name: "attribute_id", err: fmt.Errorf(`ent: validator failed for field "Ascension.attribute_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.OrderAlignmentID(); ok {
		if err := ascension.OrderAlignmentIDValidator(v); err != nil {
			return &ValidationError{Name: "order_alignment_id", err: fmt.Errorf(`ent: validator failed for field "Ascension.order_alignment_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.MoralAlignmentID(); ok {
		if err := ascension.MoralAlignmentIDValidator(v); err != nil {
			return &ValidationError{Name: "moral_alignment_id", err: fmt.Errorf(`ent: validator failed for field "Ascension.moral_alignment_id": %w`, err)}
		}
	}
	if au.mutation.ServantCleared() && len(au.mutation.ServantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ascension.servant"`)
	}
	return nil
}

func (au *AscensionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ascension.Table, ascension.Columns, sqlgraph.NewFieldSpec(ascension.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(ascension.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Stage(); ok {
		_spec.SetField(ascension.FieldStage, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedStage(); ok {
		_spec.AddField(ascension.FieldStage, field.TypeInt, value)
	}
	if au.mutation.ServantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.ServantTable,
			Columns: []string{ascension.ServantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ServantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.ServantTable,
			Columns: []string{ascension.ServantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.AttributeTable,
			Columns: []string{ascension.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.AttributeTable,
			Columns: []string{ascension.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrderAlignmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.OrderAlignmentTable,
			Columns: []string{ascension.OrderAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrderAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.OrderAlignmentTable,
			Columns: []string{ascension.OrderAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MoralAlignmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.MoralAlignmentTable,
			Columns: []string{ascension.MoralAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moralalignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MoralAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.MoralAlignmentTable,
			Columns: []string{ascension.MoralAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moralalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ascension.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AscensionUpdateOne is the builder for updating a single Ascension entity.
type AscensionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AscensionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AscensionUpdateOne) SetUpdatedAt(t time.Time) *AscensionUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetServantID sets the "servant_id" field.
func (auo *AscensionUpdateOne) SetServantID(i int) *AscensionUpdateOne {
	auo.mutation.SetServantID(i)
	return auo
}

// SetNillableServantID sets the "servant_id" field if the given value is not nil.
func (auo *AscensionUpdateOne) SetNillableServantID(i *int) *AscensionUpdateOne {
	if i != nil {
		auo.SetServantID(*i)
	}
	return auo
}

// SetStage sets the "stage" field.
func (auo *AscensionUpdateOne) SetStage(i int) *AscensionUpdateOne {
	auo.mutation.ResetStage()
	auo.mutation.SetStage(i)
	return auo
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (auo *AscensionUpdateOne) SetNillableStage(i *int) *AscensionUpdateOne {
	if i != nil {
		auo.SetStage(*i)
	}
	return auo
}

// AddStage adds i to the "stage" field.
func (auo *AscensionUpdateOne) AddStage(i int) *AscensionUpdateOne {
	auo.mutation.AddStage(i)
	return auo
}

// SetAttributeID sets the "attribute_id" field.
func (auo *AscensionUpdateOne) SetAttributeID(i int) *AscensionUpdateOne {
	auo.mutation.SetAttributeID(i)
	return auo
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (auo *AscensionUpdateOne) SetNillableAttributeID(i *int) *AscensionUpdateOne {
	if i != nil {
		auo.SetAttributeID(*i)
	}
	return auo
}

// ClearAttributeID clears the value of the "attribute_id" field.
func (auo *AscensionUpdateOne) ClearAttributeID() *AscensionUpdateOne {
	auo.mutation.ClearAttributeID()
	return auo
}

// SetOrderAlignmentID sets the "order_alignment_id" field.
func (auo *AscensionUpdateOne) SetOrderAlignmentID(i int) *AscensionUpdateOne {
	auo.mutation.SetOrderAlignmentID(i)
	return auo
}

// SetNillableOrderAlignmentID sets the "order_alignment_id" field if the given value is not nil.
func (auo *AscensionUpdateOne) SetNillableOrderAlignmentID(i *int) *AscensionUpdateOne {
	if i != nil {
		auo.SetOrderAlignmentID(*i)
	}
	return auo
}

// ClearOrderAlignmentID clears the value of the "order_alignment_id" field.
func (auo *AscensionUpdateOne) ClearOrderAlignmentID() *AscensionUpdateOne {
	auo.mutation.ClearOrderAlignmentID()
	return auo
}

// SetMoralAlignmentID sets the "moral_alignment_id" field.
func (auo *AscensionUpdateOne) SetMoralAlignmentID(i int) *AscensionUpdateOne {
	auo.mutation.SetMoralAlignmentID(i)
	return auo
}

// SetNillableMoralAlignmentID sets the "moral_alignment_id" field if the given value is not nil.
func (auo *AscensionUpdateOne) SetNillableMoralAlignmentID(i *int) *AscensionUpdateOne {
	if i != nil {
		auo.SetMoralAlignmentID(*i)
	}
	return auo
}

// ClearMoralAlignmentID clears the value of the "moral_alignment_id" field.
func (auo *AscensionUpdateOne) ClearMoralAlignmentID() *AscensionUpdateOne {
	auo.mutation.ClearMoralAlignmentID()
	return auo
}

// SetServant sets the "servant" edge to the Servant entity.
func (auo *AscensionUpdateOne) SetServant(s *Servant) *AscensionUpdateOne {
	return auo.SetServantID(s.ID)
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (auo *AscensionUpdateOne) SetAttribute(a *Attribute) *AscensionUpdateOne {
	return auo.SetAttributeID(a.ID)
}

// SetOrderAlignment sets the "order_alignment" edge to the OrderAlignment entity.
func (auo *AscensionUpdateOne) SetOrderAlignment(o *OrderAlignment) *AscensionUpdateOne {
	return auo.SetOrderAlignmentID(o.ID)
}

// SetMoralAlignment sets the "moral_alignment" edge to the MoralAlignment entity.
func (auo *AscensionUpdateOne) SetMoralAlignment(m *MoralAlignment) *AscensionUpdateOne {
	return auo.SetMoralAlignmentID(m.ID)
}

// Mutation returns the AscensionMutation object of the builder.
func (auo *AscensionUpdateOne) Mutation() *AscensionMutation {
	return auo.mutation
}

// ClearServant clears the "servant" edge to the Servant entity.
func (auo *AscensionUpdateOne) ClearServant() *AscensionUpdateOne {
	auo.mutation.ClearServant()
	return auo
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (auo *AscensionUpdateOne) ClearAttribute() *AscensionUpdateOne {
	auo.mutation.ClearAttribute()
	return auo
}

// ClearOrderAlignment clears the "order_alignment" edge to the OrderAlignment entity.
func (auo *AscensionUpdateOne) ClearOrderAlignment() *AscensionUpdateOne {
	auo.mutation.ClearOrderAlignment()
	return auo
}

// ClearMoralAlignment clears the "moral_alignment" edge to the MoralAlignment entity.
func (auo *AscensionUpdateOne) ClearMoralAlignment() *AscensionUpdateOne {
	auo.mutation.ClearMoralAlignment()
	return auo
}

// Where appends a list predicates to the AscensionUpdate builder.
func (auo *AscensionUpdateOne) Where(ps ...predicate.Ascension) *AscensionUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AscensionUpdateOne) Select(field string, fields ...string) *AscensionUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Ascension entity.
func (auo *AscensionUpdateOne) Save(ctx context.Context) (*Ascension, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AscensionUpdateOne) SaveX(ctx context.Context) *Ascension {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AscensionUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AscensionUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AscensionUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := ascension.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AscensionUpdateOne) check() error {
	if v, ok := auo.mutation.Stage(); ok {
		if err := ascension.StageValidator(v); err != nil {
			return &ValidationError{Name: "stage", err: fmt.Errorf(`ent: validator failed for field "Ascension.stage": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AttributeID(); ok {
		if err := ascension.AttributeIDValidator(v); err != nil {
			return &ValidationError{Name: "attribute_id", err: fmt.Errorf(`ent: validator failed for field "Ascension.attribute_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.OrderAlignmentID(); ok {
		if err := ascension.OrderAlignmentIDValidator(v); err != nil {
			return &ValidationError{Name: "order_alignment_id", err: fmt.Errorf(`ent: validator failed for field "Ascension.order_alignment_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.MoralAlignmentID(); ok {
		if err := ascension.MoralAlignmentIDValidator(v); err != nil {
			return &ValidationError{Name: "moral_alignment_id", err: fmt.Errorf(`ent: validator failed for field "Ascension.moral_alignment_id": %w`, err)}
		}
	}
	if auo.mutation.ServantCleared() && len(auo.mutation.ServantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ascension.servant"`)
	}
	return nil
}

func (auo *AscensionUpdateOne) sqlSave(ctx context.Context) (_node *Ascension, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ascension.Table, ascension.Columns, sqlgraph.NewFieldSpec(ascension.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ascension.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ascension.FieldID)
		for _, f := range fields {
			if !ascension.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ascension.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(ascension.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Stage(); ok {
		_spec.SetField(ascension.FieldStage, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedStage(); ok {
		_spec.AddField(ascension.FieldStage, field.TypeInt, value)
	}
	if auo.mutation.ServantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.ServantTable,
			Columns: []string{ascension.ServantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ServantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.ServantTable,
			Columns: []string{ascension.ServantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.AttributeTable,
			Columns: []string{ascension.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.AttributeTable,
			Columns: []string{ascension.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrderAlignmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.OrderAlignmentTable,
			Columns: []string{ascension.OrderAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrderAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.OrderAlignmentTable,
			Columns: []string{ascension.OrderAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MoralAlignmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.MoralAlignmentTable,
			Columns: []string{ascension.MoralAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moralalignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MoralAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.MoralAlignmentTable,
			Columns: []string{ascension.MoralAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moralalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ascension{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ascension.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
