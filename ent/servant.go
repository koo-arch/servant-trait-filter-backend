// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/koo-arch/servant-trait-filter-backend/ent/attribute"
	"github.com/koo-arch/servant-trait-filter-backend/ent/class"
	"github.com/koo-arch/servant-trait-filter-backend/ent/moralalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/servant"
)

// Servant is the model entity for the Servant schema.
type Servant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Face holds the value of the "face" field.
	Face string `json:"face,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServantQuery when eager-loading is set.
	Edges                    ServantEdges `json:"edges"`
	attribute_servants       *int
	class_servants           *int
	moral_alignment_servants *int
	order_alignment_servants *int
	selectValues             sql.SelectValues
}

// ServantEdges holds the relations/edges for other nodes in the graph.
type ServantEdges struct {
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// Attribute holds the value of the attribute edge.
	Attribute *Attribute `json:"attribute,omitempty"`
	// OrderAlignment holds the value of the order_alignment edge.
	OrderAlignment *OrderAlignment `json:"order_alignment,omitempty"`
	// MoralAlignment holds the value of the moral_alignment edge.
	MoralAlignment *MoralAlignment `json:"moral_alignment,omitempty"`
	// Traits holds the value of the traits edge.
	Traits []*Trait `json:"traits,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServantEdges) ClassOrErr() (*Class, error) {
	if e.Class != nil {
		return e.Class, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: class.Label}
	}
	return nil, &NotLoadedError{edge: "class"}
}

// AttributeOrErr returns the Attribute value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServantEdges) AttributeOrErr() (*Attribute, error) {
	if e.Attribute != nil {
		return e.Attribute, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: attribute.Label}
	}
	return nil, &NotLoadedError{edge: "attribute"}
}

// OrderAlignmentOrErr returns the OrderAlignment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServantEdges) OrderAlignmentOrErr() (*OrderAlignment, error) {
	if e.OrderAlignment != nil {
		return e.OrderAlignment, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: orderalignment.Label}
	}
	return nil, &NotLoadedError{edge: "order_alignment"}
}

// MoralAlignmentOrErr returns the MoralAlignment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServantEdges) MoralAlignmentOrErr() (*MoralAlignment, error) {
	if e.MoralAlignment != nil {
		return e.MoralAlignment, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: moralalignment.Label}
	}
	return nil, &NotLoadedError{edge: "moral_alignment"}
}

// TraitsOrErr returns the Traits value or an error if the edge
// was not loaded in eager-loading.
func (e ServantEdges) TraitsOrErr() ([]*Trait, error) {
	if e.loadedTypes[4] {
		return e.Traits, nil
	}
	return nil, &NotLoadedError{edge: "traits"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Servant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servant.FieldID:
			values[i] = new(sql.NullInt64)
		case servant.FieldName, servant.FieldFace:
			values[i] = new(sql.NullString)
		case servant.FieldCreatedAt, servant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case servant.ForeignKeys[0]: // attribute_servants
			values[i] = new(sql.NullInt64)
		case servant.ForeignKeys[1]: // class_servants
			values[i] = new(sql.NullInt64)
		case servant.ForeignKeys[2]: // moral_alignment_servants
			values[i] = new(sql.NullInt64)
		case servant.ForeignKeys[3]: // order_alignment_servants
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Servant fields.
func (s *Servant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case servant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case servant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case servant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case servant.FieldFace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field face", values[i])
			} else if value.Valid {
				s.Face = value.String
			}
		case servant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field attribute_servants", value)
			} else if value.Valid {
				s.attribute_servants = new(int)
				*s.attribute_servants = int(value.Int64)
			}
		case servant.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field class_servants", value)
			} else if value.Valid {
				s.class_servants = new(int)
				*s.class_servants = int(value.Int64)
			}
		case servant.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field moral_alignment_servants", value)
			} else if value.Valid {
				s.moral_alignment_servants = new(int)
				*s.moral_alignment_servants = int(value.Int64)
			}
		case servant.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_alignment_servants", value)
			} else if value.Valid {
				s.order_alignment_servants = new(int)
				*s.order_alignment_servants = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Servant.
// This includes values selected through modifiers, order, etc.
func (s *Servant) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryClass queries the "class" edge of the Servant entity.
func (s *Servant) QueryClass() *ClassQuery {
	return NewServantClient(s.config).QueryClass(s)
}

// QueryAttribute queries the "attribute" edge of the Servant entity.
func (s *Servant) QueryAttribute() *AttributeQuery {
	return NewServantClient(s.config).QueryAttribute(s)
}

// QueryOrderAlignment queries the "order_alignment" edge of the Servant entity.
func (s *Servant) QueryOrderAlignment() *OrderAlignmentQuery {
	return NewServantClient(s.config).QueryOrderAlignment(s)
}

// QueryMoralAlignment queries the "moral_alignment" edge of the Servant entity.
func (s *Servant) QueryMoralAlignment() *MoralAlignmentQuery {
	return NewServantClient(s.config).QueryMoralAlignment(s)
}

// QueryTraits queries the "traits" edge of the Servant entity.
func (s *Servant) QueryTraits() *TraitQuery {
	return NewServantClient(s.config).QueryTraits(s)
}

// Update returns a builder for updating this Servant.
// Note that you need to call Servant.Unwrap() before calling this method if this Servant
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Servant) Update() *ServantUpdateOne {
	return NewServantClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Servant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Servant) Unwrap() *Servant {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Servant is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Servant) String() string {
	var builder strings.Builder
	builder.WriteString("Servant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("face=")
	builder.WriteString(s.Face)
	builder.WriteByte(')')
	return builder.String()
}

// Servants is a parsable slice of Servant.
type Servants []*Servant
