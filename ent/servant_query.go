// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koo-arch/servant-trait-filter-backend/ent/attribute"
	"github.com/koo-arch/servant-trait-filter-backend/ent/class"
	"github.com/koo-arch/servant-trait-filter-backend/ent/moralalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/predicate"
	"github.com/koo-arch/servant-trait-filter-backend/ent/servant"
	"github.com/koo-arch/servant-trait-filter-backend/ent/trait"
)

// ServantQuery is the builder for querying Servant entities.
type ServantQuery struct {
	config
	ctx                *QueryContext
	order              []servant.OrderOption
	inters             []Interceptor
	predicates         []predicate.Servant
	withClass          *ClassQuery
	withAttribute      *AttributeQuery
	withOrderAlignment *OrderAlignmentQuery
	withMoralAlignment *MoralAlignmentQuery
	withTraits         *TraitQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServantQuery builder.
func (sq *ServantQuery) Where(ps ...predicate.Servant) *ServantQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *ServantQuery) Limit(limit int) *ServantQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *ServantQuery) Offset(offset int) *ServantQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *ServantQuery) Unique(unique bool) *ServantQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *ServantQuery) Order(o ...servant.OrderOption) *ServantQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryClass chains the current query on the "class" edge.
func (sq *ServantQuery) QueryClass() *ClassQuery {
	query := (&ClassClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servant.Table, servant.FieldID, selector),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servant.ClassTable, servant.ClassColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttribute chains the current query on the "attribute" edge.
func (sq *ServantQuery) QueryAttribute() *AttributeQuery {
	query := (&AttributeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servant.Table, servant.FieldID, selector),
			sqlgraph.To(attribute.Table, attribute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servant.AttributeTable, servant.AttributeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderAlignment chains the current query on the "order_alignment" edge.
func (sq *ServantQuery) QueryOrderAlignment() *OrderAlignmentQuery {
	query := (&OrderAlignmentClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servant.Table, servant.FieldID, selector),
			sqlgraph.To(orderalignment.Table, orderalignment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servant.OrderAlignmentTable, servant.OrderAlignmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMoralAlignment chains the current query on the "moral_alignment" edge.
func (sq *ServantQuery) QueryMoralAlignment() *MoralAlignmentQuery {
	query := (&MoralAlignmentClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servant.Table, servant.FieldID, selector),
			sqlgraph.To(moralalignment.Table, moralalignment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servant.MoralAlignmentTable, servant.MoralAlignmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTraits chains the current query on the "traits" edge.
func (sq *ServantQuery) QueryTraits() *TraitQuery {
	query := (&TraitClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servant.Table, servant.FieldID, selector),
			sqlgraph.To(trait.Table, trait.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, servant.TraitsTable, servant.TraitsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Servant entity from the query.
// Returns a *NotFoundError when no Servant was found.
func (sq *ServantQuery) First(ctx context.Context) (*Servant, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{servant.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *ServantQuery) FirstX(ctx context.Context) *Servant {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Servant ID from the query.
// Returns a *NotFoundError when no Servant ID was found.
func (sq *ServantQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{servant.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *ServantQuery) FirstIDX(ctx context.Context) int {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Servant entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Servant entity is found.
// Returns a *NotFoundError when no Servant entities are found.
func (sq *ServantQuery) Only(ctx context.Context) (*Servant, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{servant.Label}
	default:
		return nil, &NotSingularError{servant.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *ServantQuery) OnlyX(ctx context.Context) *Servant {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Servant ID in the query.
// Returns a *NotSingularError when more than one Servant ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *ServantQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{servant.Label}
	default:
		err = &NotSingularError{servant.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *ServantQuery) OnlyIDX(ctx context.Context) int {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Servants.
func (sq *ServantQuery) All(ctx context.Context) ([]*Servant, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryAll)
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Servant, *ServantQuery]()
	return withInterceptors[[]*Servant](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *ServantQuery) AllX(ctx context.Context) []*Servant {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Servant IDs.
func (sq *ServantQuery) IDs(ctx context.Context) (ids []int, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryIDs)
	if err = sq.Select(servant.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *ServantQuery) IDsX(ctx context.Context) []int {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *ServantQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryCount)
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*ServantQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *ServantQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *ServantQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryExist)
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *ServantQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServantQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *ServantQuery) Clone() *ServantQuery {
	if sq == nil {
		return nil
	}
	return &ServantQuery{
		config:             sq.config,
		ctx:                sq.ctx.Clone(),
		order:              append([]servant.OrderOption{}, sq.order...),
		inters:             append([]Interceptor{}, sq.inters...),
		predicates:         append([]predicate.Servant{}, sq.predicates...),
		withClass:          sq.withClass.Clone(),
		withAttribute:      sq.withAttribute.Clone(),
		withOrderAlignment: sq.withOrderAlignment.Clone(),
		withMoralAlignment: sq.withMoralAlignment.Clone(),
		withTraits:         sq.withTraits.Clone(),
		// clone intermediate query.
		sql:  sq.sql.Clone(),
		path: sq.path,
	}
}

// WithClass tells the query-builder to eager-load the nodes that are connected to
// the "class" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ServantQuery) WithClass(opts ...func(*ClassQuery)) *ServantQuery {
	query := (&ClassClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withClass = query
	return sq
}

// WithAttribute tells the query-builder to eager-load the nodes that are connected to
// the "attribute" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ServantQuery) WithAttribute(opts ...func(*AttributeQuery)) *ServantQuery {
	query := (&AttributeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withAttribute = query
	return sq
}

// WithOrderAlignment tells the query-builder to eager-load the nodes that are connected to
// the "order_alignment" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ServantQuery) WithOrderAlignment(opts ...func(*OrderAlignmentQuery)) *ServantQuery {
	query := (&OrderAlignmentClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withOrderAlignment = query
	return sq
}

// WithMoralAlignment tells the query-builder to eager-load the nodes that are connected to
// the "moral_alignment" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ServantQuery) WithMoralAlignment(opts ...func(*MoralAlignmentQuery)) *ServantQuery {
	query := (&MoralAlignmentClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withMoralAlignment = query
	return sq
}

// WithTraits tells the query-builder to eager-load the nodes that are connected to
// the "traits" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ServantQuery) WithTraits(opts ...func(*TraitQuery)) *ServantQuery {
	query := (&TraitClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withTraits = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Servant.Query().
//		GroupBy(servant.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *ServantQuery) GroupBy(field string, fields ...string) *ServantGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServantGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = servant.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Servant.Query().
//		Select(servant.FieldCreatedAt).
//		Scan(ctx, &v)
func (sq *ServantQuery) Select(fields ...string) *ServantSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &ServantSelect{ServantQuery: sq}
	sbuild.label = servant.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServantSelect configured with the given aggregations.
func (sq *ServantQuery) Aggregate(fns ...AggregateFunc) *ServantSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *ServantQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !servant.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *ServantQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Servant, error) {
	var (
		nodes       = []*Servant{}
		_spec       = sq.querySpec()
		loadedTypes = [5]bool{
			sq.withClass != nil,
			sq.withAttribute != nil,
			sq.withOrderAlignment != nil,
			sq.withMoralAlignment != nil,
			sq.withTraits != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Servant).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Servant{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withClass; query != nil {
		if err := sq.loadClass(ctx, query, nodes, nil,
			func(n *Servant, e *Class) { n.Edges.Class = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withAttribute; query != nil {
		if err := sq.loadAttribute(ctx, query, nodes, nil,
			func(n *Servant, e *Attribute) { n.Edges.Attribute = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withOrderAlignment; query != nil {
		if err := sq.loadOrderAlignment(ctx, query, nodes, nil,
			func(n *Servant, e *OrderAlignment) { n.Edges.OrderAlignment = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withMoralAlignment; query != nil {
		if err := sq.loadMoralAlignment(ctx, query, nodes, nil,
			func(n *Servant, e *MoralAlignment) { n.Edges.MoralAlignment = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withTraits; query != nil {
		if err := sq.loadTraits(ctx, query, nodes,
			func(n *Servant) { n.Edges.Traits = []*Trait{} },
			func(n *Servant, e *Trait) { n.Edges.Traits = append(n.Edges.Traits, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *ServantQuery) loadClass(ctx context.Context, query *ClassQuery, nodes []*Servant, init func(*Servant), assign func(*Servant, *Class)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Servant)
	for i := range nodes {
		fk := nodes[i].ClassID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(class.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "class_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ServantQuery) loadAttribute(ctx context.Context, query *AttributeQuery, nodes []*Servant, init func(*Servant), assign func(*Servant, *Attribute)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Servant)
	for i := range nodes {
		fk := nodes[i].AttributeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(attribute.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "attribute_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ServantQuery) loadOrderAlignment(ctx context.Context, query *OrderAlignmentQuery, nodes []*Servant, init func(*Servant), assign func(*Servant, *OrderAlignment)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Servant)
	for i := range nodes {
		fk := nodes[i].OrderAlignmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(orderalignment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_alignment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ServantQuery) loadMoralAlignment(ctx context.Context, query *MoralAlignmentQuery, nodes []*Servant, init func(*Servant), assign func(*Servant, *MoralAlignment)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Servant)
	for i := range nodes {
		fk := nodes[i].MoralAlignmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(moralalignment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "moral_alignment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ServantQuery) loadTraits(ctx context.Context, query *TraitQuery, nodes []*Servant, init func(*Servant), assign func(*Servant, *Trait)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Servant)
	nids := make(map[int]map[*Servant]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(servant.TraitsTable)
		s.Join(joinT).On(s.C(trait.FieldID), joinT.C(servant.TraitsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(servant.TraitsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(servant.TraitsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Servant]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Trait](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "traits" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (sq *ServantQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *ServantQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(servant.Table, servant.Columns, sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servant.FieldID)
		for i := range fields {
			if fields[i] != servant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sq.withClass != nil {
			_spec.Node.AddColumnOnce(servant.FieldClassID)
		}
		if sq.withAttribute != nil {
			_spec.Node.AddColumnOnce(servant.FieldAttributeID)
		}
		if sq.withOrderAlignment != nil {
			_spec.Node.AddColumnOnce(servant.FieldOrderAlignmentID)
		}
		if sq.withMoralAlignment != nil {
			_spec.Node.AddColumnOnce(servant.FieldMoralAlignmentID)
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *ServantQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(servant.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = servant.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ServantGroupBy is the group-by builder for Servant entities.
type ServantGroupBy struct {
	selector
	build *ServantQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *ServantGroupBy) Aggregate(fns ...AggregateFunc) *ServantGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *ServantGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, ent.OpQueryGroupBy)
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServantQuery, *ServantGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *ServantGroupBy) sqlScan(ctx context.Context, root *ServantQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServantSelect is the builder for selecting fields of Servant entities.
type ServantSelect struct {
	*ServantQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *ServantSelect) Aggregate(fns ...AggregateFunc) *ServantSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *ServantSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, ent.OpQuerySelect)
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServantQuery, *ServantSelect](ctx, ss.ServantQuery, ss, ss.inters, v)
}

func (ss *ServantSelect) sqlScan(ctx context.Context, root *ServantQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
