// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AttributesColumns holds the columns for the "attributes" table.
	AttributesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name_en", Type: field.TypeString},
		{Name: "name_ja", Type: field.TypeString},
	}
	// AttributesTable holds the schema information for the "attributes" table.
	AttributesTable = &schema.Table{
		Name:       "attributes",
		Columns:    AttributesColumns,
		PrimaryKey: []*schema.Column{AttributesColumns[0]},
	}
	// ClassesColumns holds the columns for the "classes" table.
	ClassesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name_en", Type: field.TypeString},
		{Name: "name_ja", Type: field.TypeString},
	}
	// ClassesTable holds the schema information for the "classes" table.
	ClassesTable = &schema.Table{
		Name:       "classes",
		Columns:    ClassesColumns,
		PrimaryKey: []*schema.Column{ClassesColumns[0]},
	}
	// MoralAlignmentsColumns holds the columns for the "moral_alignments" table.
	MoralAlignmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name_en", Type: field.TypeString},
		{Name: "name_ja", Type: field.TypeString},
	}
	// MoralAlignmentsTable holds the schema information for the "moral_alignments" table.
	MoralAlignmentsTable = &schema.Table{
		Name:       "moral_alignments",
		Columns:    MoralAlignmentsColumns,
		PrimaryKey: []*schema.Column{MoralAlignmentsColumns[0]},
	}
	// OrderAlignmentsColumns holds the columns for the "order_alignments" table.
	OrderAlignmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name_en", Type: field.TypeString},
		{Name: "name_ja", Type: field.TypeString},
	}
	// OrderAlignmentsTable holds the schema information for the "order_alignments" table.
	OrderAlignmentsTable = &schema.Table{
		Name:       "order_alignments",
		Columns:    OrderAlignmentsColumns,
		PrimaryKey: []*schema.Column{OrderAlignmentsColumns[0]},
	}
	// ServantsColumns holds the columns for the "servants" table.
	ServantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "face", Type: field.TypeString},
		{Name: "attribute_servants", Type: field.TypeInt, Nullable: true},
		{Name: "class_servants", Type: field.TypeInt, Nullable: true},
		{Name: "moral_alignment_servants", Type: field.TypeInt, Nullable: true},
		{Name: "order_alignment_servants", Type: field.TypeInt, Nullable: true},
	}
	// ServantsTable holds the schema information for the "servants" table.
	ServantsTable = &schema.Table{
		Name:       "servants",
		Columns:    ServantsColumns,
		PrimaryKey: []*schema.Column{ServantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "servants_attributes_servants",
				Columns:    []*schema.Column{ServantsColumns[5]},
				RefColumns: []*schema.Column{AttributesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "servants_classes_servants",
				Columns:    []*schema.Column{ServantsColumns[6]},
				RefColumns: []*schema.Column{ClassesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "servants_moral_alignments_servants",
				Columns:    []*schema.Column{ServantsColumns[7]},
				RefColumns: []*schema.Column{MoralAlignmentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "servants_order_alignments_servants",
				Columns:    []*schema.Column{ServantsColumns[8]},
				RefColumns: []*schema.Column{OrderAlignmentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TraitsColumns holds the columns for the "traits" table.
	TraitsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name_en", Type: field.TypeString},
		{Name: "name_ja", Type: field.TypeString},
	}
	// TraitsTable holds the schema information for the "traits" table.
	TraitsTable = &schema.Table{
		Name:       "traits",
		Columns:    TraitsColumns,
		PrimaryKey: []*schema.Column{TraitsColumns[0]},
	}
	// TraitServantsColumns holds the columns for the "trait_servants" table.
	TraitServantsColumns = []*schema.Column{
		{Name: "trait_id", Type: field.TypeInt},
		{Name: "servant_id", Type: field.TypeInt},
	}
	// TraitServantsTable holds the schema information for the "trait_servants" table.
	TraitServantsTable = &schema.Table{
		Name:       "trait_servants",
		Columns:    TraitServantsColumns,
		PrimaryKey: []*schema.Column{TraitServantsColumns[0], TraitServantsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "trait_servants_trait_id",
				Columns:    []*schema.Column{TraitServantsColumns[0]},
				RefColumns: []*schema.Column{TraitsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "trait_servants_servant_id",
				Columns:    []*schema.Column{TraitServantsColumns[1]},
				RefColumns: []*schema.Column{ServantsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AttributesTable,
		ClassesTable,
		MoralAlignmentsTable,
		OrderAlignmentsTable,
		ServantsTable,
		TraitsTable,
		TraitServantsTable,
	}
)

func init() {
	ServantsTable.ForeignKeys[0].RefTable = AttributesTable
	ServantsTable.ForeignKeys[1].RefTable = ClassesTable
	ServantsTable.ForeignKeys[2].RefTable = MoralAlignmentsTable
	ServantsTable.ForeignKeys[3].RefTable = OrderAlignmentsTable
	TraitServantsTable.ForeignKeys[0].RefTable = TraitsTable
	TraitServantsTable.ForeignKeys[1].RefTable = ServantsTable
}
