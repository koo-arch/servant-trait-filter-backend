// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koo-arch/servant-trait-filter-backend/ent/ascension"
	"github.com/koo-arch/servant-trait-filter-backend/ent/attribute"
	"github.com/koo-arch/servant-trait-filter-backend/ent/moralalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/servant"
)

// AscensionCreate is the builder for creating a Ascension entity.
type AscensionCreate struct {
	config
	mutation *AscensionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AscensionCreate) SetCreatedAt(t time.Time) *AscensionCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AscensionCreate) SetNillableCreatedAt(t *time.Time) *AscensionCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AscensionCreate) SetUpdatedAt(t time.Time) *AscensionCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AscensionCreate) SetNillableUpdatedAt(t *time.Time) *AscensionCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetServantID sets the "servant_id" field.
func (ac *AscensionCreate) SetServantID(i int) *AscensionCreate {
	ac.mutation.SetServantID(i)
	return ac
}

// SetStage sets the "stage" field.
func (ac *AscensionCreate) SetStage(i int) *AscensionCreate {
	ac.mutation.SetStage(i)
	return ac
}

// SetAttributeID sets the "attribute_id" field.
func (ac *AscensionCreate) SetAttributeID(i int) *AscensionCreate {
	ac.mutation.SetAttributeID(i)
	return ac
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (ac *AscensionCreate) SetNillableAttributeID(i *int) *AscensionCreate {
	if i != nil {
		ac.SetAttributeID(*i)
	}
	return ac
}

// SetOrderAlignmentID sets the "order_alignment_id" field.
func (ac *AscensionCreate) SetOrderAlignmentID(i int) *AscensionCreate {
	ac.mutation.SetOrderAlignmentID(i)
	return ac
}

// SetNillableOrderAlignmentID sets the "order_alignment_id" field if the given value is not nil.
func (ac *AscensionCreate) SetNillableOrderAlignmentID(i *int) *AscensionCreate {
	if i != nil {
		ac.SetOrderAlignmentID(*i)
	}
	return ac
}

// SetMoralAlignmentID sets the "moral_alignment_id" field.
func (ac *AscensionCreate) SetMoralAlignmentID(i int) *AscensionCreate {
	ac.mutation.SetMoralAlignmentID(i)
	return ac
}

// SetNillableMoralAlignmentID sets the "moral_alignment_id" field if the given value is not nil.
func (ac *AscensionCreate) SetNillableMoralAlignmentID(i *int) *AscensionCreate {
	if i != nil {
		ac.SetMoralAlignmentID(*i)
	}
	return ac
}

// SetServant sets the "servant" edge to the Servant entity.
func (ac *AscensionCreate) SetServant(s *Servant) *AscensionCreate {
	return ac.SetServantID(s.ID)
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (ac *AscensionCreate) SetAttribute(a *Attribute) *AscensionCreate {
	return ac.SetAttributeID(a.ID)
}

// SetOrderAlignment sets the "order_alignment" edge to the OrderAlignment entity.
func (ac *AscensionCreate) SetOrderAlignment(o *OrderAlignment) *AscensionCreate {
	return ac.SetOrderAlignmentID(o.ID)
}

// SetMoralAlignment sets the "moral_alignment" edge to the MoralAlignment entity.
func (ac *AscensionCreate) SetMoralAlignment(m *MoralAlignment) *AscensionCreate {
	return ac.SetMoralAlignmentID(m.ID)
}

// Mutation returns the AscensionMutation object of the builder.
func (ac *AscensionCreate) Mutation() *AscensionMutation {
	return ac.mutation
}

// Save creates the Ascension in the database.
func (ac *AscensionCreate) Save(ctx context.Context) (*Ascension, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AscensionCreate) SaveX(ctx context.Context) *Ascension {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AscensionCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AscensionCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AscensionCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := ascension.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := ascension.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AscensionCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Ascension.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Ascension.updated_at"`)}
	}
	if _, ok := ac.mutation.ServantID(); !ok {
		return &ValidationError{Name: "servant_id", err: errors.New(`ent: missing required field "Ascension.servant_id"`)}
	}
	if _, ok := ac.mutation.Stage(); !ok {
		return &ValidationError{Name: "stage", err: errors.New(`ent: missing required field "Ascension.stage"`)}
	}
	if v, ok := ac.mutation.Stage(); ok {
		if err := ascension.StageValidator(v); err != nil {
			return &ValidationError{Name: "stage", err: fmt.Errorf(`ent: validator failed for field "Ascension.stage": %w`, err)}
		}
	}
	if v, ok := ac.mutation.AttributeID(); ok {
		if err := ascension.AttributeIDValidator(v); err != nil {
			return &ValidationError{Name: "attribute_id", err: fmt.Errorf(`ent: validator failed for field "Ascension.attribute_id": %w`, err)}
		}
	}
	if v, ok := ac.mutation.OrderAlignmentID(); ok {
		if err := ascension.OrderAlignmentIDValidator(v); err != nil {
			return &ValidationError{Name: "order_alignment_id", err: fmt.Errorf(`ent: validator failed for field "Ascension.order_alignment_id": %w`, err)}
		}
	}
	if v, ok := ac.mutation.MoralAlignmentID(); ok {
		if err := ascension.MoralAlignmentIDValidator(v); err != nil {
			return &ValidationError{Name: "moral_alignment_id", err: fmt.Errorf(`ent: validator failed for field "Ascension.moral_alignment_id": %w`, err)}
		}
	}
	if len(ac.mutation.ServantIDs()) == 0 {
		return &ValidationError{Name: "servant", err: errors.New(`ent: missing required edge "Ascension.servant"`)}
	}
	return nil
}

func (ac *AscensionCreate) sqlSave(ctx context.Context) (*Ascension, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AscensionCreate) createSpec() (*Ascension, *sqlgraph.CreateSpec) {
	var (
		_node = &Ascension{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(ascension.Table, sqlgraph.NewFieldSpec(ascension.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(ascension.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(ascension.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Stage(); ok {
		_spec.SetField(ascension.FieldStage, field.TypeInt, value)
		_node.Stage = value
	}
	if nodes := ac.mutation.ServantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.ServantTable,
			Columns: []string{ascension.ServantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.AttributeTable,
			Columns: []string{ascension.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AttributeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrderAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.OrderAlignmentTable,
			Columns: []string{ascension.OrderAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderAlignmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MoralAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ascension.MoralAlignmentTable,
			Columns: []string{ascension.MoralAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moralalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MoralAlignmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ascension.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AscensionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AscensionCreate) OnConflict(opts ...sql.ConflictOption) *AscensionUpsertOne {
	ac.conflict = opts
	return &AscensionUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ascension.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AscensionCreate) OnConflictColumns(columns ...string) *AscensionUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AscensionUpsertOne{
		create: ac,
	}
}

type (
	// AscensionUpsertOne is the builder for "upsert"-ing
	//  one Ascension node.
	AscensionUpsertOne struct {
		create *AscensionCreate
	}

	// AscensionUpsert is the "OnConflict" setter.
	AscensionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AscensionUpsert) SetUpdatedAt(v time.Time) *AscensionUpsert {
	u.Set(ascension.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AscensionUpsert) UpdateUpdatedAt() *AscensionUpsert {
	u.SetExcluded(ascension.FieldUpdatedAt)
	return u
}

// SetServantID sets the "servant_id" field.
func (u *AscensionUpsert) SetServantID(v int) *AscensionUpsert {
	u.Set(ascension.FieldServantID, v)
	return u
}

// UpdateServantID sets the "servant_id" field to the value that was provided on create.
func (u *AscensionUpsert) UpdateServantID() *AscensionUpsert {
	u.SetExcluded(ascension.FieldServantID)
	return u
}

// SetStage sets the "stage" field.
func (u *AscensionUpsert) SetStage(v int) *AscensionUpsert {
	u.Set(ascension.FieldStage, v)
	return u
}

// UpdateStage sets the "stage" field to the value that was provided on create.
func (u *AscensionUpsert) UpdateStage() *AscensionUpsert {
	u.SetExcluded(ascension.FieldStage)
	return u
}

// AddStage adds v to the "stage" field.
func (u *AscensionUpsert) AddStage(v int) *AscensionUpsert {
	u.Add(ascension.FieldStage, v)
	return u
}

// SetAttributeID sets the "attribute_id" field.
func (u *AscensionUpsert) SetAttributeID(v int) *AscensionUpsert {
	u.Set(ascension.FieldAttributeID, v)
	return u
}

// UpdateAttributeID sets the "attribute_id" field to the value that was provided on create.
func (u *AscensionUpsert) UpdateAttributeID() *AscensionUpsert {
	u.SetExcluded(ascension.FieldAttributeID)
	return u
}

// ClearAttributeID clears the value of the "attribute_id" field.
func (u *AscensionUpsert) ClearAttributeID() *AscensionUpsert {
	u.SetNull(ascension.FieldAttributeID)
	return u
}

// SetOrderAlignmentID sets the "order_alignment_id" field.
func (u *AscensionUpsert) SetOrderAlignmentID(v int) *AscensionUpsert {
	u.Set(ascension.FieldOrderAlignmentID, v)
	return u
}

// UpdateOrderAlignmentID sets the "order_alignment_id" field to the value that was provided on create.
func (u *AscensionUpsert) UpdateOrderAlignmentID() *AscensionUpsert {
	u.SetExcluded(ascension.FieldOrderAlignmentID)
	return u
}

// ClearOrderAlignmentID clears the value of the "order_alignment_id" field.
func (u *AscensionUpsert) ClearOrderAlignmentID() *AscensionUpsert {
	u.SetNull(ascension.FieldOrderAlignmentID)
	return u
}

// SetMoralAlignmentID sets the "moral_alignment_id" field.
func (u *AscensionUpsert) SetMoralAlignmentID(v int) *AscensionUpsert {
	u.Set(ascension.FieldMoralAlignmentID, v)
	return u
}

// UpdateMoralAlignmentID sets the "moral_alignment_id" field to the value that was provided on create.
func (u *AscensionUpsert) UpdateMoralAlignmentID() *AscensionUpsert {
	u.SetExcluded(ascension.FieldMoralAlignmentID)
	return u
}

// ClearMoralAlignmentID clears the value of the "moral_alignment_id" field.
func (u *AscensionUpsert) ClearMoralAlignmentID() *AscensionUpsert {
	u.SetNull(ascension.FieldMoralAlignmentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Ascension.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AscensionUpsertOne) UpdateNewValues() *AscensionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ascension.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ascension.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AscensionUpsertOne) Ignore() *AscensionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AscensionUpsertOne) DoNothing() *AscensionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AscensionCreate.OnConflict
// documentation for more info.
func (u *AscensionUpsertOne) Update(set func(*AscensionUpsert)) *AscensionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AscensionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AscensionUpsertOne) SetUpdatedAt(v time.Time) *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AscensionUpsertOne) UpdateUpdatedAt() *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetServantID sets the "servant_id" field.
func (u *AscensionUpsertOne) SetServantID(v int) *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.SetServantID(v)
	})
}

// UpdateServantID sets the "servant_id" field to the value that was provided on create.
func (u *AscensionUpsertOne) UpdateServantID() *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateServantID()
	})
}

// SetStage sets the "stage" field.
func (u *AscensionUpsertOne) SetStage(v int) *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.SetStage(v)
	})
}

// AddStage adds v to the "stage" field.
func (u *AscensionUpsertOne) AddStage(v int) *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.AddStage(v)
	})
}

// UpdateStage sets the "stage" field to the value that was provided on create.
func (u *AscensionUpsertOne) UpdateStage() *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateStage()
	})
}

// SetAttributeID sets the "attribute_id" field.
func (u *AscensionUpsertOne) SetAttributeID(v int) *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.SetAttributeID(v)
	})
}

// UpdateAttributeID sets the "attribute_id" field to the value that was provided on create.
func (u *AscensionUpsertOne) UpdateAttributeID() *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateAttributeID()
	})
}

// ClearAttributeID clears the value of the "attribute_id" field.
func (u *AscensionUpsertOne) ClearAttributeID() *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.ClearAttributeID()
	})
}

// SetOrderAlignmentID sets the "order_alignment_id" field.
func (u *AscensionUpsertOne) SetOrderAlignmentID(v int) *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.SetOrderAlignmentID(v)
	})
}

// UpdateOrderAlignmentID sets the "order_alignment_id" field to the value that was provided on create.
func (u *AscensionUpsertOne) UpdateOrderAlignmentID() *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateOrderAlignmentID()
	})
}

// ClearOrderAlignmentID clears the value of the "order_alignment_id" field.
func (u *AscensionUpsertOne) ClearOrderAlignmentID() *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.ClearOrderAlignmentID()
	})
}

// SetMoralAlignmentID sets the "moral_alignment_id" field.
func (u *AscensionUpsertOne) SetMoralAlignmentID(v int) *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.SetMoralAlignmentID(v)
	})
}

// UpdateMoralAlignmentID sets the "moral_alignment_id" field to the value that was provided on create.
func (u *AscensionUpsertOne) UpdateMoralAlignmentID() *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateMoralAlignmentID()
	})
}

// ClearMoralAlignmentID clears the value of the "moral_alignment_id" field.
func (u *AscensionUpsertOne) ClearMoralAlignmentID() *AscensionUpsertOne {
	return u.Update(func(s *AscensionUpsert) {
		s.ClearMoralAlignmentID()
	})
}

// Exec executes the query.
func (u *AscensionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AscensionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AscensionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AscensionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AscensionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AscensionCreateBulk is the builder for creating many Ascension entities in bulk.
type AscensionCreateBulk struct {
	config
	err      error
	builders []*AscensionCreate
	conflict []sql.ConflictOption
}

// Save creates the Ascension entities in the database.
func (acb *AscensionCreateBulk) Save(ctx context.Context) ([]*Ascension, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Ascension, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AscensionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AscensionCreateBulk) SaveX(ctx context.Context) []*Ascension {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AscensionCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AscensionCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ascension.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AscensionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AscensionCreateBulk) OnConflict(opts ...sql.ConflictOption) *AscensionUpsertBulk {
	acb.conflict = opts
	return &AscensionUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ascension.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AscensionCreateBulk) OnConflictColumns(columns ...string) *AscensionUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AscensionUpsertBulk{
		create: acb,
	}
}

// AscensionUpsertBulk is the builder for "upsert"-ing
// a bulk of Ascension nodes.
type AscensionUpsertBulk struct {
	create *AscensionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ascension.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AscensionUpsertBulk) UpdateNewValues() *AscensionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ascension.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ascension.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AscensionUpsertBulk) Ignore() *AscensionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AscensionUpsertBulk) DoNothing() *AscensionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AscensionCreateBulk.OnConflict
// documentation for more info.
func (u *AscensionUpsertBulk) Update(set func(*AscensionUpsert)) *AscensionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AscensionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AscensionUpsertBulk) SetUpdatedAt(v time.Time) *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AscensionUpsertBulk) UpdateUpdatedAt() *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetServantID sets the "servant_id" field.
func (u *AscensionUpsertBulk) SetServantID(v int) *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.SetServantID(v)
	})
}

// UpdateServantID sets the "servant_id" field to the value that was provided on create.
func (u *AscensionUpsertBulk) UpdateServantID() *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateServantID()
	})
}

// SetStage sets the "stage" field.
func (u *AscensionUpsertBulk) SetStage(v int) *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.SetStage(v)
	})
}

// AddStage adds v to the "stage" field.
func (u *AscensionUpsertBulk) AddStage(v int) *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.AddStage(v)
	})
}

// UpdateStage sets the "stage" field to the value that was provided on create.
func (u *AscensionUpsertBulk) UpdateStage() *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateStage()
	})
}

// SetAttributeID sets the "attribute_id" field.
func (u *AscensionUpsertBulk) SetAttributeID(v int) *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.SetAttributeID(v)
	})
}

// UpdateAttributeID sets the "attribute_id" field to the value that was provided on create.
func (u *AscensionUpsertBulk) UpdateAttributeID() *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateAttributeID()
	})
}

// ClearAttributeID clears the value of the "attribute_id" field.
func (u *AscensionUpsertBulk) ClearAttributeID() *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.ClearAttributeID()
	})
}

// SetOrderAlignmentID sets the "order_alignment_id" field.
func (u *AscensionUpsertBulk) SetOrderAlignmentID(v int) *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.SetOrderAlignmentID(v)
	})
}

// UpdateOrderAlignmentID sets the "order_alignment_id" field to the value that was provided on create.
func (u *AscensionUpsertBulk) UpdateOrderAlignmentID() *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateOrderAlignmentID()
	})
}

// ClearOrderAlignmentID clears the value of the "order_alignment_id" field.
func (u *AscensionUpsertBulk) ClearOrderAlignmentID() *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.ClearOrderAlignmentID()
	})
}

// SetMoralAlignmentID sets the "moral_alignment_id" field.
func (u *AscensionUpsertBulk) SetMoralAlignmentID(v int) *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.SetMoralAlignmentID(v)
	})
}

// UpdateMoralAlignmentID sets the "moral_alignment_id" field to the value that was provided on create.
func (u *AscensionUpsertBulk) UpdateMoralAlignmentID() *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.UpdateMoralAlignmentID()
	})
}

// ClearMoralAlignmentID clears the value of the "moral_alignment_id" field.
func (u *AscensionUpsertBulk) ClearMoralAlignmentID() *AscensionUpsertBulk {
	return u.Update(func(s *AscensionUpsert) {
		s.ClearMoralAlignmentID()
	})
}

// Exec executes the query.
func (u *AscensionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AscensionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AscensionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AscensionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
