// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koo-arch/servant-trait-filter-backend/ent/ascension"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/predicate"
)

// OrderAlignmentQuery is the builder for querying OrderAlignment entities.
type OrderAlignmentQuery struct {
	config
	ctx            *QueryContext
	order          []orderalignment.OrderOption
	inters         []Interceptor
	predicates     []predicate.OrderAlignment
	withAscensions *AscensionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderAlignmentQuery builder.
func (oaq *OrderAlignmentQuery) Where(ps ...predicate.OrderAlignment) *OrderAlignmentQuery {
	oaq.predicates = append(oaq.predicates, ps...)
	return oaq
}

// Limit the number of records to be returned by this query.
func (oaq *OrderAlignmentQuery) Limit(limit int) *OrderAlignmentQuery {
	oaq.ctx.Limit = &limit
	return oaq
}

// Offset to start from.
func (oaq *OrderAlignmentQuery) Offset(offset int) *OrderAlignmentQuery {
	oaq.ctx.Offset = &offset
	return oaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oaq *OrderAlignmentQuery) Unique(unique bool) *OrderAlignmentQuery {
	oaq.ctx.Unique = &unique
	return oaq
}

// Order specifies how the records should be ordered.
func (oaq *OrderAlignmentQuery) Order(o ...orderalignment.OrderOption) *OrderAlignmentQuery {
	oaq.order = append(oaq.order, o...)
	return oaq
}

// QueryAscensions chains the current query on the "ascensions" edge.
func (oaq *OrderAlignmentQuery) QueryAscensions() *AscensionQuery {
	query := (&AscensionClient{config: oaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderalignment.Table, orderalignment.FieldID, selector),
			sqlgraph.To(ascension.Table, ascension.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderalignment.AscensionsTable, orderalignment.AscensionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderAlignment entity from the query.
// Returns a *NotFoundError when no OrderAlignment was found.
func (oaq *OrderAlignmentQuery) First(ctx context.Context) (*OrderAlignment, error) {
	nodes, err := oaq.Limit(1).All(setContextOp(ctx, oaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderalignment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oaq *OrderAlignmentQuery) FirstX(ctx context.Context) *OrderAlignment {
	node, err := oaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderAlignment ID from the query.
// Returns a *NotFoundError when no OrderAlignment ID was found.
func (oaq *OrderAlignmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oaq.Limit(1).IDs(setContextOp(ctx, oaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderalignment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oaq *OrderAlignmentQuery) FirstIDX(ctx context.Context) int {
	id, err := oaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderAlignment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrderAlignment entity is found.
// Returns a *NotFoundError when no OrderAlignment entities are found.
func (oaq *OrderAlignmentQuery) Only(ctx context.Context) (*OrderAlignment, error) {
	nodes, err := oaq.Limit(2).All(setContextOp(ctx, oaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderalignment.Label}
	default:
		return nil, &NotSingularError{orderalignment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oaq *OrderAlignmentQuery) OnlyX(ctx context.Context) *OrderAlignment {
	node, err := oaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderAlignment ID in the query.
// Returns a *NotSingularError when more than one OrderAlignment ID is found.
// Returns a *NotFoundError when no entities are found.
func (oaq *OrderAlignmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oaq.Limit(2).IDs(setContextOp(ctx, oaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderalignment.Label}
	default:
		err = &NotSingularError{orderalignment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oaq *OrderAlignmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := oaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderAlignments.
func (oaq *OrderAlignmentQuery) All(ctx context.Context) ([]*OrderAlignment, error) {
	ctx = setContextOp(ctx, oaq.ctx, ent.OpQueryAll)
	if err := oaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrderAlignment, *OrderAlignmentQuery]()
	return withInterceptors[[]*OrderAlignment](ctx, oaq, qr, oaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oaq *OrderAlignmentQuery) AllX(ctx context.Context) []*OrderAlignment {
	nodes, err := oaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderAlignment IDs.
func (oaq *OrderAlignmentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if oaq.ctx.Unique == nil && oaq.path != nil {
		oaq.Unique(true)
	}
	ctx = setContextOp(ctx, oaq.ctx, ent.OpQueryIDs)
	if err = oaq.Select(orderalignment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oaq *OrderAlignmentQuery) IDsX(ctx context.Context) []int {
	ids, err := oaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oaq *OrderAlignmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oaq.ctx, ent.OpQueryCount)
	if err := oaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oaq, querierCount[*OrderAlignmentQuery](), oaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oaq *OrderAlignmentQuery) CountX(ctx context.Context) int {
	count, err := oaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oaq *OrderAlignmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oaq.ctx, ent.OpQueryExist)
	switch _, err := oaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oaq *OrderAlignmentQuery) ExistX(ctx context.Context) bool {
	exist, err := oaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderAlignmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oaq *OrderAlignmentQuery) Clone() *OrderAlignmentQuery {
	if oaq == nil {
		return nil
	}
	return &OrderAlignmentQuery{
		config:         oaq.config,
		ctx:            oaq.ctx.Clone(),
		order:          append([]orderalignment.OrderOption{}, oaq.order...),
		inters:         append([]Interceptor{}, oaq.inters...),
		predicates:     append([]predicate.OrderAlignment{}, oaq.predicates...),
		withAscensions: oaq.withAscensions.Clone(),
		// clone intermediate query.
		sql:  oaq.sql.Clone(),
		path: oaq.path,
	}
}

// WithAscensions tells the query-builder to eager-load the nodes that are connected to
// the "ascensions" edge. The optional arguments are used to configure the query builder of the edge.
func (oaq *OrderAlignmentQuery) WithAscensions(opts ...func(*AscensionQuery)) *OrderAlignmentQuery {
	query := (&AscensionClient{config: oaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oaq.withAscensions = query
	return oaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderAlignment.Query().
//		GroupBy(orderalignment.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oaq *OrderAlignmentQuery) GroupBy(field string, fields ...string) *OrderAlignmentGroupBy {
	oaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrderAlignmentGroupBy{build: oaq}
	grbuild.flds = &oaq.ctx.Fields
	grbuild.label = orderalignment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.OrderAlignment.Query().
//		Select(orderalignment.FieldCreatedAt).
//		Scan(ctx, &v)
func (oaq *OrderAlignmentQuery) Select(fields ...string) *OrderAlignmentSelect {
	oaq.ctx.Fields = append(oaq.ctx.Fields, fields...)
	sbuild := &OrderAlignmentSelect{OrderAlignmentQuery: oaq}
	sbuild.label = orderalignment.Label
	sbuild.flds, sbuild.scan = &oaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrderAlignmentSelect configured with the given aggregations.
func (oaq *OrderAlignmentQuery) Aggregate(fns ...AggregateFunc) *OrderAlignmentSelect {
	return oaq.Select().Aggregate(fns...)
}

func (oaq *OrderAlignmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oaq); err != nil {
				return err
			}
		}
	}
	for _, f := range oaq.ctx.Fields {
		if !orderalignment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oaq.path != nil {
		prev, err := oaq.path(ctx)
		if err != nil {
			return err
		}
		oaq.sql = prev
	}
	return nil
}

func (oaq *OrderAlignmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrderAlignment, error) {
	var (
		nodes       = []*OrderAlignment{}
		_spec       = oaq.querySpec()
		loadedTypes = [1]bool{
			oaq.withAscensions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrderAlignment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrderAlignment{config: oaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oaq.withAscensions; query != nil {
		if err := oaq.loadAscensions(ctx, query, nodes,
			func(n *OrderAlignment) { n.Edges.Ascensions = []*Ascension{} },
			func(n *OrderAlignment, e *Ascension) { n.Edges.Ascensions = append(n.Edges.Ascensions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oaq *OrderAlignmentQuery) loadAscensions(ctx context.Context, query *AscensionQuery, nodes []*OrderAlignment, init func(*OrderAlignment), assign func(*OrderAlignment, *Ascension)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*OrderAlignment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(ascension.FieldOrderAlignmentID)
	}
	query.Where(predicate.Ascension(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(orderalignment.AscensionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrderAlignmentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "order_alignment_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (oaq *OrderAlignmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oaq.querySpec()
	_spec.Node.Columns = oaq.ctx.Fields
	if len(oaq.ctx.Fields) > 0 {
		_spec.Unique = oaq.ctx.Unique != nil && *oaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oaq.driver, _spec)
}

func (oaq *OrderAlignmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(orderalignment.Table, orderalignment.Columns, sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt))
	_spec.From = oaq.sql
	if unique := oaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oaq.path != nil {
		_spec.Unique = true
	}
	if fields := oaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderalignment.FieldID)
		for i := range fields {
			if fields[i] != orderalignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oaq *OrderAlignmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oaq.driver.Dialect())
	t1 := builder.Table(orderalignment.Table)
	columns := oaq.ctx.Fields
	if len(columns) == 0 {
		columns = orderalignment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oaq.sql != nil {
		selector = oaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oaq.ctx.Unique != nil && *oaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range oaq.predicates {
		p(selector)
	}
	for _, p := range oaq.order {
		p(selector)
	}
	if offset := oaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderAlignmentGroupBy is the group-by builder for OrderAlignment entities.
type OrderAlignmentGroupBy struct {
	selector
	build *OrderAlignmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oagb *OrderAlignmentGroupBy) Aggregate(fns ...AggregateFunc) *OrderAlignmentGroupBy {
	oagb.fns = append(oagb.fns, fns...)
	return oagb
}

// Scan applies the selector query and scans the result into the given value.
func (oagb *OrderAlignmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oagb.build.ctx, ent.OpQueryGroupBy)
	if err := oagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderAlignmentQuery, *OrderAlignmentGroupBy](ctx, oagb.build, oagb, oagb.build.inters, v)
}

func (oagb *OrderAlignmentGroupBy) sqlScan(ctx context.Context, root *OrderAlignmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oagb.fns))
	for _, fn := range oagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oagb.flds)+len(oagb.fns))
		for _, f := range *oagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrderAlignmentSelect is the builder for selecting fields of OrderAlignment entities.
type OrderAlignmentSelect struct {
	*OrderAlignmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oas *OrderAlignmentSelect) Aggregate(fns ...AggregateFunc) *OrderAlignmentSelect {
	oas.fns = append(oas.fns, fns...)
	return oas
}

// Scan applies the selector query and scans the result into the given value.
func (oas *OrderAlignmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oas.ctx, ent.OpQuerySelect)
	if err := oas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderAlignmentQuery, *OrderAlignmentSelect](ctx, oas.OrderAlignmentQuery, oas, oas.inters, v)
}

func (oas *OrderAlignmentSelect) sqlScan(ctx context.Context, root *OrderAlignmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oas.fns))
	for _, fn := range oas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
