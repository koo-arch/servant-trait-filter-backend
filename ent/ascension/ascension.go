// Code generated by ent, DO NOT EDIT.

package ascension

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ascension type in the database.
	Label = "ascension"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldServantID holds the string denoting the servant_id field in the database.
	FieldServantID = "servant_id"
	// FieldStage holds the string denoting the stage field in the database.
	FieldStage = "stage"
	// FieldAttributeID holds the string denoting the attribute_id field in the database.
	FieldAttributeID = "attribute_id"
	// FieldOrderAlignmentID holds the string denoting the order_alignment_id field in the database.
	FieldOrderAlignmentID = "order_alignment_id"
	// FieldMoralAlignmentID holds the string denoting the moral_alignment_id field in the database.
	FieldMoralAlignmentID = "moral_alignment_id"
	// EdgeServant holds the string denoting the servant edge name in mutations.
	EdgeServant = "servant"
	// EdgeAttribute holds the string denoting the attribute edge name in mutations.
	EdgeAttribute = "attribute"
	// EdgeOrderAlignment holds the string denoting the order_alignment edge name in mutations.
	EdgeOrderAlignment = "order_alignment"
	// EdgeMoralAlignment holds the string denoting the moral_alignment edge name in mutations.
	EdgeMoralAlignment = "moral_alignment"
	// Table holds the table name of the ascension in the database.
	Table = "ascensions"
	// ServantTable is the table that holds the servant relation/edge.
	ServantTable = "ascensions"
	// ServantInverseTable is the table name for the Servant entity.
	// It exists in this package in order to avoid circular dependency with the "servant" package.
	ServantInverseTable = "servants"
	// ServantColumn is the table column denoting the servant relation/edge.
	ServantColumn = "servant_id"
	// AttributeTable is the table that holds the attribute relation/edge.
	AttributeTable = "ascensions"
	// AttributeInverseTable is the table name for the Attribute entity.
	// It exists in this package in order to avoid circular dependency with the "attribute" package.
	AttributeInverseTable = "attributes"
	// AttributeColumn is the table column denoting the attribute relation/edge.
	AttributeColumn = "attribute_id"
	// OrderAlignmentTable is the table that holds the order_alignment relation/edge.
	OrderAlignmentTable = "ascensions"
	// OrderAlignmentInverseTable is the table name for the OrderAlignment entity.
	// It exists in this package in order to avoid circular dependency with the "orderalignment" package.
	OrderAlignmentInverseTable = "order_alignments"
	// OrderAlignmentColumn is the table column denoting the order_alignment relation/edge.
	OrderAlignmentColumn = "order_alignment_id"
	// MoralAlignmentTable is the table that holds the moral_alignment relation/edge.
	MoralAlignmentTable = "ascensions"
	// MoralAlignmentInverseTable is the table name for the MoralAlignment entity.
	// It exists in this package in order to avoid circular dependency with the "moralalignment" package.
	MoralAlignmentInverseTable = "moral_alignments"
	// MoralAlignmentColumn is the table column denoting the moral_alignment relation/edge.
	MoralAlignmentColumn = "moral_alignment_id"
)

// Columns holds all SQL columns for ascension fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldServantID,
	FieldStage,
	FieldAttributeID,
	FieldOrderAlignmentID,
	FieldMoralAlignmentID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// StageValidator is a validator for the "stage" field. It is called by the builders before save.
	StageValidator func(int) error
	// AttributeIDValidator is a validator for the "attribute_id" field. It is called by the builders before save.
	AttributeIDValidator func(int) error
	// OrderAlignmentIDValidator is a validator for the "order_alignment_id" field. It is called by the builders before save.
	OrderAlignmentIDValidator func(int) error
	// MoralAlignmentIDValidator is a validator for the "moral_alignment_id" field. It is called by the builders before save.
	MoralAlignmentIDValidator func(int) error
)

// OrderOption defines the ordering options for the Ascension queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByServantID orders the results by the servant_id field.
func ByServantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServantID, opts...).ToFunc()
}

// ByStage orders the results by the stage field.
func ByStage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStage, opts...).ToFunc()
}

// ByAttributeID orders the results by the attribute_id field.
func ByAttributeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttributeID, opts...).ToFunc()
}

// ByOrderAlignmentID orders the results by the order_alignment_id field.
func ByOrderAlignmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderAlignmentID, opts...).ToFunc()
}

// ByMoralAlignmentID orders the results by the moral_alignment_id field.
func ByMoralAlignmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMoralAlignmentID, opts...).ToFunc()
}

// ByServantField orders the results by servant field.
func ByServantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServantStep(), sql.OrderByField(field, opts...))
	}
}

// ByAttributeField orders the results by attribute field.
func ByAttributeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttributeStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderAlignmentField orders the results by order_alignment field.
func ByOrderAlignmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderAlignmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByMoralAlignmentField orders the results by moral_alignment field.
func ByMoralAlignmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMoralAlignmentStep(), sql.OrderByField(field, opts...))
	}
}
func newServantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServantTable, ServantColumn),
	)
}
func newAttributeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttributeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AttributeTable, AttributeColumn),
	)
}
func newOrderAlignmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderAlignmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrderAlignmentTable, OrderAlignmentColumn),
	)
}
func newMoralAlignmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MoralAlignmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MoralAlignmentTable, MoralAlignmentColumn),
	)
}
