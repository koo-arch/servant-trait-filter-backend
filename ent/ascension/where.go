// Code generated by ent, DO NOT EDIT.

package ascension

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/koo-arch/servant-trait-filter-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ascension {
	return predicate.Ascension(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ascension {
	return predicate.Ascension(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ascension {
	return predicate.Ascension(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ascension {
	return predicate.Ascension(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldUpdatedAt, v))
}

// ServantID applies equality check predicate on the "servant_id" field. It's identical to ServantIDEQ.
func ServantID(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldServantID, v))
}

// Stage applies equality check predicate on the "stage" field. It's identical to StageEQ.
func Stage(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldStage, v))
}

// AttributeID applies equality check predicate on the "attribute_id" field. It's identical to AttributeIDEQ.
func AttributeID(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldAttributeID, v))
}

// OrderAlignmentID applies equality check predicate on the "order_alignment_id" field. It's identical to OrderAlignmentIDEQ.
func OrderAlignmentID(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldOrderAlignmentID, v))
}

// MoralAlignmentID applies equality check predicate on the "moral_alignment_id" field. It's identical to MoralAlignmentIDEQ.
func MoralAlignmentID(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldMoralAlignmentID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Ascension {
	return predicate.Ascension(sql.FieldLTE(FieldUpdatedAt, v))
}

// ServantIDEQ applies the EQ predicate on the "servant_id" field.
func ServantIDEQ(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldServantID, v))
}

// ServantIDNEQ applies the NEQ predicate on the "servant_id" field.
func ServantIDNEQ(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNEQ(FieldServantID, v))
}

// ServantIDIn applies the In predicate on the "servant_id" field.
func ServantIDIn(vs ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldIn(FieldServantID, vs...))
}

// ServantIDNotIn applies the NotIn predicate on the "servant_id" field.
func ServantIDNotIn(vs ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNotIn(FieldServantID, vs...))
}

// StageEQ applies the EQ predicate on the "stage" field.
func StageEQ(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldStage, v))
}

// StageNEQ applies the NEQ predicate on the "stage" field.
func StageNEQ(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNEQ(FieldStage, v))
}

// StageIn applies the In predicate on the "stage" field.
func StageIn(vs ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldIn(FieldStage, vs...))
}

// StageNotIn applies the NotIn predicate on the "stage" field.
func StageNotIn(vs ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNotIn(FieldStage, vs...))
}

// StageGT applies the GT predicate on the "stage" field.
func StageGT(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldGT(FieldStage, v))
}

// StageGTE applies the GTE predicate on the "stage" field.
func StageGTE(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldGTE(FieldStage, v))
}

// StageLT applies the LT predicate on the "stage" field.
func StageLT(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldLT(FieldStage, v))
}

// StageLTE applies the LTE predicate on the "stage" field.
func StageLTE(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldLTE(FieldStage, v))
}

// AttributeIDEQ applies the EQ predicate on the "attribute_id" field.
func AttributeIDEQ(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldAttributeID, v))
}

// AttributeIDNEQ applies the NEQ predicate on the "attribute_id" field.
func AttributeIDNEQ(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNEQ(FieldAttributeID, v))
}

// AttributeIDIn applies the In predicate on the "attribute_id" field.
func AttributeIDIn(vs ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldIn(FieldAttributeID, vs...))
}

// AttributeIDNotIn applies the NotIn predicate on the "attribute_id" field.
func AttributeIDNotIn(vs ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNotIn(FieldAttributeID, vs...))
}

// AttributeIDIsNil applies the IsNil predicate on the "attribute_id" field.
func AttributeIDIsNil() predicate.Ascension {
	return predicate.Ascension(sql.FieldIsNull(FieldAttributeID))
}

// AttributeIDNotNil applies the NotNil predicate on the "attribute_id" field.
func AttributeIDNotNil() predicate.Ascension {
	return predicate.Ascension(sql.FieldNotNull(FieldAttributeID))
}

// OrderAlignmentIDEQ applies the EQ predicate on the "order_alignment_id" field.
func OrderAlignmentIDEQ(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldOrderAlignmentID, v))
}

// OrderAlignmentIDNEQ applies the NEQ predicate on the "order_alignment_id" field.
func OrderAlignmentIDNEQ(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNEQ(FieldOrderAlignmentID, v))
}

// OrderAlignmentIDIn applies the In predicate on the "order_alignment_id" field.
func OrderAlignmentIDIn(vs ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldIn(FieldOrderAlignmentID, vs...))
}

// OrderAlignmentIDNotIn applies the NotIn predicate on the "order_alignment_id" field.
func OrderAlignmentIDNotIn(vs ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNotIn(FieldOrderAlignmentID, vs...))
}

// OrderAlignmentIDIsNil applies the IsNil predicate on the "order_alignment_id" field.
func OrderAlignmentIDIsNil() predicate.Ascension {
	return predicate.Ascension(sql.FieldIsNull(FieldOrderAlignmentID))
}

// OrderAlignmentIDNotNil applies the NotNil predicate on the "order_alignment_id" field.
func OrderAlignmentIDNotNil() predicate.Ascension {
	return predicate.Ascension(sql.FieldNotNull(FieldOrderAlignmentID))
}

// MoralAlignmentIDEQ applies the EQ predicate on the "moral_alignment_id" field.
func MoralAlignmentIDEQ(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldEQ(FieldMoralAlignmentID, v))
}

// MoralAlignmentIDNEQ applies the NEQ predicate on the "moral_alignment_id" field.
func MoralAlignmentIDNEQ(v int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNEQ(FieldMoralAlignmentID, v))
}

// MoralAlignmentIDIn applies the In predicate on the "moral_alignment_id" field.
func MoralAlignmentIDIn(vs ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldIn(FieldMoralAlignmentID, vs...))
}

// MoralAlignmentIDNotIn applies the NotIn predicate on the "moral_alignment_id" field.
func MoralAlignmentIDNotIn(vs ...int) predicate.Ascension {
	return predicate.Ascension(sql.FieldNotIn(FieldMoralAlignmentID, vs...))
}

// MoralAlignmentIDIsNil applies the IsNil predicate on the "moral_alignment_id" field.
func MoralAlignmentIDIsNil() predicate.Ascension {
	return predicate.Ascension(sql.FieldIsNull(FieldMoralAlignmentID))
}

// MoralAlignmentIDNotNil applies the NotNil predicate on the "moral_alignment_id" field.
func MoralAlignmentIDNotNil() predicate.Ascension {
	return predicate.Ascension(sql.FieldNotNull(FieldMoralAlignmentID))
}

// HasServant applies the HasEdge predicate on the "servant" edge.
func HasServant() predicate.Ascension {
	return predicate.Ascension(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServantTable, ServantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServantWith applies the HasEdge predicate on the "servant" edge with a given conditions (other predicates).
func HasServantWith(preds ...predicate.Servant) predicate.Ascension {
	return predicate.Ascension(func(s *sql.Selector) {
		step := newServantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttribute applies the HasEdge predicate on the "attribute" edge.
func HasAttribute() predicate.Ascension {
	return predicate.Ascension(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttributeTable, AttributeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttributeWith applies the HasEdge predicate on the "attribute" edge with a given conditions (other predicates).
func HasAttributeWith(preds ...predicate.Attribute) predicate.Ascension {
	return predicate.Ascension(func(s *sql.Selector) {
		step := newAttributeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderAlignment applies the HasEdge predicate on the "order_alignment" edge.
func HasOrderAlignment() predicate.Ascension {
	return predicate.Ascension(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderAlignmentTable, OrderAlignmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderAlignmentWith applies the HasEdge predicate on the "order_alignment" edge with a given conditions (other predicates).
func HasOrderAlignmentWith(preds ...predicate.OrderAlignment) predicate.Ascension {
	return predicate.Ascension(func(s *sql.Selector) {
		step := newOrderAlignmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMoralAlignment applies the HasEdge predicate on the "moral_alignment" edge.
func HasMoralAlignment() predicate.Ascension {
	return predicate.Ascension(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MoralAlignmentTable, MoralAlignmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMoralAlignmentWith applies the HasEdge predicate on the "moral_alignment" edge with a given conditions (other predicates).
func HasMoralAlignmentWith(preds ...predicate.MoralAlignment) predicate.Ascension {
	return predicate.Ascension(func(s *sql.Selector) {
		step := newMoralAlignmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ascension) predicate.Ascension {
	return predicate.Ascension(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ascension) predicate.Ascension {
	return predicate.Ascension(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ascension) predicate.Ascension {
	return predicate.Ascension(sql.NotPredicates(p))
}
