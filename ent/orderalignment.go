// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
)

// OrderAlignment is the model entity for the OrderAlignment schema.
type OrderAlignment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// NameEn holds the value of the "name_en" field.
	NameEn string `json:"name_en,omitempty"`
	// NameJa holds the value of the "name_ja" field.
	NameJa string `json:"name_ja,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderAlignmentQuery when eager-loading is set.
	Edges        OrderAlignmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderAlignmentEdges holds the relations/edges for other nodes in the graph.
type OrderAlignmentEdges struct {
	// Servants holds the value of the servants edge.
	Servants []*Servant `json:"servants,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServantsOrErr returns the Servants value or an error if the edge
// was not loaded in eager-loading.
func (e OrderAlignmentEdges) ServantsOrErr() ([]*Servant, error) {
	if e.loadedTypes[0] {
		return e.Servants, nil
	}
	return nil, &NotLoadedError{edge: "servants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderAlignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderalignment.FieldID:
			values[i] = new(sql.NullInt64)
		case orderalignment.FieldNameEn, orderalignment.FieldNameJa:
			values[i] = new(sql.NullString)
		case orderalignment.FieldCreatedAt, orderalignment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderAlignment fields.
func (oa *OrderAlignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderalignment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oa.ID = int(value.Int64)
		case orderalignment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oa.CreatedAt = value.Time
			}
		case orderalignment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oa.UpdatedAt = value.Time
			}
		case orderalignment.FieldNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_en", values[i])
			} else if value.Valid {
				oa.NameEn = value.String
			}
		case orderalignment.FieldNameJa:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_ja", values[i])
			} else if value.Valid {
				oa.NameJa = value.String
			}
		default:
			oa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderAlignment.
// This includes values selected through modifiers, order, etc.
func (oa *OrderAlignment) Value(name string) (ent.Value, error) {
	return oa.selectValues.Get(name)
}

// QueryServants queries the "servants" edge of the OrderAlignment entity.
func (oa *OrderAlignment) QueryServants() *ServantQuery {
	return NewOrderAlignmentClient(oa.config).QueryServants(oa)
}

// Update returns a builder for updating this OrderAlignment.
// Note that you need to call OrderAlignment.Unwrap() before calling this method if this OrderAlignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OrderAlignment) Update() *OrderAlignmentUpdateOne {
	return NewOrderAlignmentClient(oa.config).UpdateOne(oa)
}

// Unwrap unwraps the OrderAlignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OrderAlignment) Unwrap() *OrderAlignment {
	_tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderAlignment is not a transactional entity")
	}
	oa.config.driver = _tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OrderAlignment) String() string {
	var builder strings.Builder
	builder.WriteString("OrderAlignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(oa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name_en=")
	builder.WriteString(oa.NameEn)
	builder.WriteString(", ")
	builder.WriteString("name_ja=")
	builder.WriteString(oa.NameJa)
	builder.WriteByte(')')
	return builder.String()
}

// OrderAlignments is a parsable slice of OrderAlignment.
type OrderAlignments []*OrderAlignment
