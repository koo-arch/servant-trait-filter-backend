// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koo-arch/servant-trait-filter-backend/ent/attribute"
	"github.com/koo-arch/servant-trait-filter-backend/ent/class"
	"github.com/koo-arch/servant-trait-filter-backend/ent/moralalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/predicate"
	"github.com/koo-arch/servant-trait-filter-backend/ent/servant"
	"github.com/koo-arch/servant-trait-filter-backend/ent/trait"
)

// ServantUpdate is the builder for updating Servant entities.
type ServantUpdate struct {
	config
	hooks    []Hook
	mutation *ServantMutation
}

// Where appends a list predicates to the ServantUpdate builder.
func (su *ServantUpdate) Where(ps ...predicate.Servant) *ServantUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ServantUpdate) SetUpdatedAt(t time.Time) *ServantUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNameEn sets the "name_en" field.
func (su *ServantUpdate) SetNameEn(s string) *ServantUpdate {
	su.mutation.SetNameEn(s)
	return su
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (su *ServantUpdate) SetNillableNameEn(s *string) *ServantUpdate {
	if s != nil {
		su.SetNameEn(*s)
	}
	return su
}

// SetNameJa sets the "name_ja" field.
func (su *ServantUpdate) SetNameJa(s string) *ServantUpdate {
	su.mutation.SetNameJa(s)
	return su
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (su *ServantUpdate) SetNillableNameJa(s *string) *ServantUpdate {
	if s != nil {
		su.SetNameJa(*s)
	}
	return su
}

// SetFace sets the "face" field.
func (su *ServantUpdate) SetFace(s string) *ServantUpdate {
	su.mutation.SetFace(s)
	return su
}

// SetNillableFace sets the "face" field if the given value is not nil.
func (su *ServantUpdate) SetNillableFace(s *string) *ServantUpdate {
	if s != nil {
		su.SetFace(*s)
	}
	return su
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (su *ServantUpdate) SetClassID(id int) *ServantUpdate {
	su.mutation.SetClassID(id)
	return su
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (su *ServantUpdate) SetNillableClassID(id *int) *ServantUpdate {
	if id != nil {
		su = su.SetClassID(*id)
	}
	return su
}

// SetClass sets the "class" edge to the Class entity.
func (su *ServantUpdate) SetClass(c *Class) *ServantUpdate {
	return su.SetClassID(c.ID)
}

// SetAttributeID sets the "attribute" edge to the Attribute entity by ID.
func (su *ServantUpdate) SetAttributeID(id int) *ServantUpdate {
	su.mutation.SetAttributeID(id)
	return su
}

// SetNillableAttributeID sets the "attribute" edge to the Attribute entity by ID if the given value is not nil.
func (su *ServantUpdate) SetNillableAttributeID(id *int) *ServantUpdate {
	if id != nil {
		su = su.SetAttributeID(*id)
	}
	return su
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (su *ServantUpdate) SetAttribute(a *Attribute) *ServantUpdate {
	return su.SetAttributeID(a.ID)
}

// SetOrderAlignmentID sets the "order_alignment" edge to the OrderAlignment entity by ID.
func (su *ServantUpdate) SetOrderAlignmentID(id int) *ServantUpdate {
	su.mutation.SetOrderAlignmentID(id)
	return su
}

// SetNillableOrderAlignmentID sets the "order_alignment" edge to the OrderAlignment entity by ID if the given value is not nil.
func (su *ServantUpdate) SetNillableOrderAlignmentID(id *int) *ServantUpdate {
	if id != nil {
		su = su.SetOrderAlignmentID(*id)
	}
	return su
}

// SetOrderAlignment sets the "order_alignment" edge to the OrderAlignment entity.
func (su *ServantUpdate) SetOrderAlignment(o *OrderAlignment) *ServantUpdate {
	return su.SetOrderAlignmentID(o.ID)
}

// SetMoralAlignmentID sets the "moral_alignment" edge to the MoralAlignment entity by ID.
func (su *ServantUpdate) SetMoralAlignmentID(id int) *ServantUpdate {
	su.mutation.SetMoralAlignmentID(id)
	return su
}

// SetNillableMoralAlignmentID sets the "moral_alignment" edge to the MoralAlignment entity by ID if the given value is not nil.
func (su *ServantUpdate) SetNillableMoralAlignmentID(id *int) *ServantUpdate {
	if id != nil {
		su = su.SetMoralAlignmentID(*id)
	}
	return su
}

// SetMoralAlignment sets the "moral_alignment" edge to the MoralAlignment entity.
func (su *ServantUpdate) SetMoralAlignment(m *MoralAlignment) *ServantUpdate {
	return su.SetMoralAlignmentID(m.ID)
}

// AddTraitIDs adds the "traits" edge to the Trait entity by IDs.
func (su *ServantUpdate) AddTraitIDs(ids ...int) *ServantUpdate {
	su.mutation.AddTraitIDs(ids...)
	return su
}

// AddTraits adds the "traits" edges to the Trait entity.
func (su *ServantUpdate) AddTraits(t ...*Trait) *ServantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTraitIDs(ids...)
}

// Mutation returns the ServantMutation object of the builder.
func (su *ServantUpdate) Mutation() *ServantMutation {
	return su.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (su *ServantUpdate) ClearClass() *ServantUpdate {
	su.mutation.ClearClass()
	return su
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (su *ServantUpdate) ClearAttribute() *ServantUpdate {
	su.mutation.ClearAttribute()
	return su
}

// ClearOrderAlignment clears the "order_alignment" edge to the OrderAlignment entity.
func (su *ServantUpdate) ClearOrderAlignment() *ServantUpdate {
	su.mutation.ClearOrderAlignment()
	return su
}

// ClearMoralAlignment clears the "moral_alignment" edge to the MoralAlignment entity.
func (su *ServantUpdate) ClearMoralAlignment() *ServantUpdate {
	su.mutation.ClearMoralAlignment()
	return su
}

// ClearTraits clears all "traits" edges to the Trait entity.
func (su *ServantUpdate) ClearTraits() *ServantUpdate {
	su.mutation.ClearTraits()
	return su
}

// RemoveTraitIDs removes the "traits" edge to Trait entities by IDs.
func (su *ServantUpdate) RemoveTraitIDs(ids ...int) *ServantUpdate {
	su.mutation.RemoveTraitIDs(ids...)
	return su
}

// RemoveTraits removes "traits" edges to Trait entities.
func (su *ServantUpdate) RemoveTraits(t ...*Trait) *ServantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTraitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServantUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServantUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServantUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServantUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ServantUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := servant.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ServantUpdate) check() error {
	if v, ok := su.mutation.NameEn(); ok {
		if err := servant.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "Servant.name_en": %w`, err)}
		}
	}
	return nil
}

func (su *ServantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servant.Table, servant.Columns, sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(servant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.NameEn(); ok {
		_spec.SetField(servant.FieldNameEn, field.TypeString, value)
	}
	if value, ok := su.mutation.NameJa(); ok {
		_spec.SetField(servant.FieldNameJa, field.TypeString, value)
	}
	if value, ok := su.mutation.Face(); ok {
		_spec.SetField(servant.FieldFace, field.TypeString, value)
	}
	if su.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.ClassTable,
			Columns: []string{servant.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.ClassTable,
			Columns: []string{servant.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.AttributeTable,
			Columns: []string{servant.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.AttributeTable,
			Columns: []string{servant.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OrderAlignmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.OrderAlignmentTable,
			Columns: []string{servant.OrderAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OrderAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.OrderAlignmentTable,
			Columns: []string{servant.OrderAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MoralAlignmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.MoralAlignmentTable,
			Columns: []string{servant.MoralAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moralalignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MoralAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.MoralAlignmentTable,
			Columns: []string{servant.MoralAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moralalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TraitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   servant.TraitsTable,
			Columns: servant.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTraitsIDs(); len(nodes) > 0 && !su.mutation.TraitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   servant.TraitsTable,
			Columns: servant.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TraitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   servant.TraitsTable,
			Columns: servant.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServantUpdateOne is the builder for updating a single Servant entity.
type ServantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServantMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ServantUpdateOne) SetUpdatedAt(t time.Time) *ServantUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNameEn sets the "name_en" field.
func (suo *ServantUpdateOne) SetNameEn(s string) *ServantUpdateOne {
	suo.mutation.SetNameEn(s)
	return suo
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (suo *ServantUpdateOne) SetNillableNameEn(s *string) *ServantUpdateOne {
	if s != nil {
		suo.SetNameEn(*s)
	}
	return suo
}

// SetNameJa sets the "name_ja" field.
func (suo *ServantUpdateOne) SetNameJa(s string) *ServantUpdateOne {
	suo.mutation.SetNameJa(s)
	return suo
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (suo *ServantUpdateOne) SetNillableNameJa(s *string) *ServantUpdateOne {
	if s != nil {
		suo.SetNameJa(*s)
	}
	return suo
}

// SetFace sets the "face" field.
func (suo *ServantUpdateOne) SetFace(s string) *ServantUpdateOne {
	suo.mutation.SetFace(s)
	return suo
}

// SetNillableFace sets the "face" field if the given value is not nil.
func (suo *ServantUpdateOne) SetNillableFace(s *string) *ServantUpdateOne {
	if s != nil {
		suo.SetFace(*s)
	}
	return suo
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (suo *ServantUpdateOne) SetClassID(id int) *ServantUpdateOne {
	suo.mutation.SetClassID(id)
	return suo
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (suo *ServantUpdateOne) SetNillableClassID(id *int) *ServantUpdateOne {
	if id != nil {
		suo = suo.SetClassID(*id)
	}
	return suo
}

// SetClass sets the "class" edge to the Class entity.
func (suo *ServantUpdateOne) SetClass(c *Class) *ServantUpdateOne {
	return suo.SetClassID(c.ID)
}

// SetAttributeID sets the "attribute" edge to the Attribute entity by ID.
func (suo *ServantUpdateOne) SetAttributeID(id int) *ServantUpdateOne {
	suo.mutation.SetAttributeID(id)
	return suo
}

// SetNillableAttributeID sets the "attribute" edge to the Attribute entity by ID if the given value is not nil.
func (suo *ServantUpdateOne) SetNillableAttributeID(id *int) *ServantUpdateOne {
	if id != nil {
		suo = suo.SetAttributeID(*id)
	}
	return suo
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (suo *ServantUpdateOne) SetAttribute(a *Attribute) *ServantUpdateOne {
	return suo.SetAttributeID(a.ID)
}

// SetOrderAlignmentID sets the "order_alignment" edge to the OrderAlignment entity by ID.
func (suo *ServantUpdateOne) SetOrderAlignmentID(id int) *ServantUpdateOne {
	suo.mutation.SetOrderAlignmentID(id)
	return suo
}

// SetNillableOrderAlignmentID sets the "order_alignment" edge to the OrderAlignment entity by ID if the given value is not nil.
func (suo *ServantUpdateOne) SetNillableOrderAlignmentID(id *int) *ServantUpdateOne {
	if id != nil {
		suo = suo.SetOrderAlignmentID(*id)
	}
	return suo
}

// SetOrderAlignment sets the "order_alignment" edge to the OrderAlignment entity.
func (suo *ServantUpdateOne) SetOrderAlignment(o *OrderAlignment) *ServantUpdateOne {
	return suo.SetOrderAlignmentID(o.ID)
}

// SetMoralAlignmentID sets the "moral_alignment" edge to the MoralAlignment entity by ID.
func (suo *ServantUpdateOne) SetMoralAlignmentID(id int) *ServantUpdateOne {
	suo.mutation.SetMoralAlignmentID(id)
	return suo
}

// SetNillableMoralAlignmentID sets the "moral_alignment" edge to the MoralAlignment entity by ID if the given value is not nil.
func (suo *ServantUpdateOne) SetNillableMoralAlignmentID(id *int) *ServantUpdateOne {
	if id != nil {
		suo = suo.SetMoralAlignmentID(*id)
	}
	return suo
}

// SetMoralAlignment sets the "moral_alignment" edge to the MoralAlignment entity.
func (suo *ServantUpdateOne) SetMoralAlignment(m *MoralAlignment) *ServantUpdateOne {
	return suo.SetMoralAlignmentID(m.ID)
}

// AddTraitIDs adds the "traits" edge to the Trait entity by IDs.
func (suo *ServantUpdateOne) AddTraitIDs(ids ...int) *ServantUpdateOne {
	suo.mutation.AddTraitIDs(ids...)
	return suo
}

// AddTraits adds the "traits" edges to the Trait entity.
func (suo *ServantUpdateOne) AddTraits(t ...*Trait) *ServantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTraitIDs(ids...)
}

// Mutation returns the ServantMutation object of the builder.
func (suo *ServantUpdateOne) Mutation() *ServantMutation {
	return suo.mutation
}

// ClearClass clears the "class" edge to the Class entity.
func (suo *ServantUpdateOne) ClearClass() *ServantUpdateOne {
	suo.mutation.ClearClass()
	return suo
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (suo *ServantUpdateOne) ClearAttribute() *ServantUpdateOne {
	suo.mutation.ClearAttribute()
	return suo
}

// ClearOrderAlignment clears the "order_alignment" edge to the OrderAlignment entity.
func (suo *ServantUpdateOne) ClearOrderAlignment() *ServantUpdateOne {
	suo.mutation.ClearOrderAlignment()
	return suo
}

// ClearMoralAlignment clears the "moral_alignment" edge to the MoralAlignment entity.
func (suo *ServantUpdateOne) ClearMoralAlignment() *ServantUpdateOne {
	suo.mutation.ClearMoralAlignment()
	return suo
}

// ClearTraits clears all "traits" edges to the Trait entity.
func (suo *ServantUpdateOne) ClearTraits() *ServantUpdateOne {
	suo.mutation.ClearTraits()
	return suo
}

// RemoveTraitIDs removes the "traits" edge to Trait entities by IDs.
func (suo *ServantUpdateOne) RemoveTraitIDs(ids ...int) *ServantUpdateOne {
	suo.mutation.RemoveTraitIDs(ids...)
	return suo
}

// RemoveTraits removes "traits" edges to Trait entities.
func (suo *ServantUpdateOne) RemoveTraits(t ...*Trait) *ServantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTraitIDs(ids...)
}

// Where appends a list predicates to the ServantUpdate builder.
func (suo *ServantUpdateOne) Where(ps ...predicate.Servant) *ServantUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServantUpdateOne) Select(field string, fields ...string) *ServantUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Servant entity.
func (suo *ServantUpdateOne) Save(ctx context.Context) (*Servant, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServantUpdateOne) SaveX(ctx context.Context) *Servant {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServantUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServantUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ServantUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := servant.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ServantUpdateOne) check() error {
	if v, ok := suo.mutation.NameEn(); ok {
		if err := servant.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "Servant.name_en": %w`, err)}
		}
	}
	return nil
}

func (suo *ServantUpdateOne) sqlSave(ctx context.Context) (_node *Servant, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servant.Table, servant.Columns, sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Servant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servant.FieldID)
		for _, f := range fields {
			if !servant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(servant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.NameEn(); ok {
		_spec.SetField(servant.FieldNameEn, field.TypeString, value)
	}
	if value, ok := suo.mutation.NameJa(); ok {
		_spec.SetField(servant.FieldNameJa, field.TypeString, value)
	}
	if value, ok := suo.mutation.Face(); ok {
		_spec.SetField(servant.FieldFace, field.TypeString, value)
	}
	if suo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.ClassTable,
			Columns: []string{servant.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.ClassTable,
			Columns: []string{servant.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.AttributeTable,
			Columns: []string{servant.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.AttributeTable,
			Columns: []string{servant.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OrderAlignmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.OrderAlignmentTable,
			Columns: []string{servant.OrderAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OrderAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.OrderAlignmentTable,
			Columns: []string{servant.OrderAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MoralAlignmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.MoralAlignmentTable,
			Columns: []string{servant.MoralAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moralalignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MoralAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.MoralAlignmentTable,
			Columns: []string{servant.MoralAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moralalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TraitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   servant.TraitsTable,
			Columns: servant.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTraitsIDs(); len(nodes) > 0 && !suo.mutation.TraitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   servant.TraitsTable,
			Columns: servant.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TraitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   servant.TraitsTable,
			Columns: servant.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Servant{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
