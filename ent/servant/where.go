// Code generated by ent, DO NOT EDIT.

package servant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/koo-arch/servant-trait-filter-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Servant {
	return predicate.Servant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Servant {
	return predicate.Servant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Servant {
	return predicate.Servant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Servant {
	return predicate.Servant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Servant {
	return predicate.Servant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Servant {
	return predicate.Servant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Servant {
	return predicate.Servant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Servant {
	return predicate.Servant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Servant {
	return predicate.Servant(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Servant {
	return predicate.Servant(sql.FieldEQ(FieldName, v))
}

// Face applies equality check predicate on the "face" field. It's identical to FaceEQ.
func Face(v string) predicate.Servant {
	return predicate.Servant(sql.FieldEQ(FieldFace, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Servant {
	return predicate.Servant(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Servant {
	return predicate.Servant(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Servant {
	return predicate.Servant(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Servant {
	return predicate.Servant(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Servant {
	return predicate.Servant(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Servant {
	return predicate.Servant(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Servant {
	return predicate.Servant(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Servant {
	return predicate.Servant(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Servant {
	return predicate.Servant(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Servant {
	return predicate.Servant(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Servant {
	return predicate.Servant(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Servant {
	return predicate.Servant(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Servant {
	return predicate.Servant(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Servant {
	return predicate.Servant(sql.FieldContainsFold(FieldName, v))
}

// FaceEQ applies the EQ predicate on the "face" field.
func FaceEQ(v string) predicate.Servant {
	return predicate.Servant(sql.FieldEQ(FieldFace, v))
}

// FaceNEQ applies the NEQ predicate on the "face" field.
func FaceNEQ(v string) predicate.Servant {
	return predicate.Servant(sql.FieldNEQ(FieldFace, v))
}

// FaceIn applies the In predicate on the "face" field.
func FaceIn(vs ...string) predicate.Servant {
	return predicate.Servant(sql.FieldIn(FieldFace, vs...))
}

// FaceNotIn applies the NotIn predicate on the "face" field.
func FaceNotIn(vs ...string) predicate.Servant {
	return predicate.Servant(sql.FieldNotIn(FieldFace, vs...))
}

// FaceGT applies the GT predicate on the "face" field.
func FaceGT(v string) predicate.Servant {
	return predicate.Servant(sql.FieldGT(FieldFace, v))
}

// FaceGTE applies the GTE predicate on the "face" field.
func FaceGTE(v string) predicate.Servant {
	return predicate.Servant(sql.FieldGTE(FieldFace, v))
}

// FaceLT applies the LT predicate on the "face" field.
func FaceLT(v string) predicate.Servant {
	return predicate.Servant(sql.FieldLT(FieldFace, v))
}

// FaceLTE applies the LTE predicate on the "face" field.
func FaceLTE(v string) predicate.Servant {
	return predicate.Servant(sql.FieldLTE(FieldFace, v))
}

// FaceContains applies the Contains predicate on the "face" field.
func FaceContains(v string) predicate.Servant {
	return predicate.Servant(sql.FieldContains(FieldFace, v))
}

// FaceHasPrefix applies the HasPrefix predicate on the "face" field.
func FaceHasPrefix(v string) predicate.Servant {
	return predicate.Servant(sql.FieldHasPrefix(FieldFace, v))
}

// FaceHasSuffix applies the HasSuffix predicate on the "face" field.
func FaceHasSuffix(v string) predicate.Servant {
	return predicate.Servant(sql.FieldHasSuffix(FieldFace, v))
}

// FaceEqualFold applies the EqualFold predicate on the "face" field.
func FaceEqualFold(v string) predicate.Servant {
	return predicate.Servant(sql.FieldEqualFold(FieldFace, v))
}

// FaceContainsFold applies the ContainsFold predicate on the "face" field.
func FaceContainsFold(v string) predicate.Servant {
	return predicate.Servant(sql.FieldContainsFold(FieldFace, v))
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.Servant {
	return predicate.Servant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.Class) predicate.Servant {
	return predicate.Servant(func(s *sql.Selector) {
		step := newClassStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttribute applies the HasEdge predicate on the "attribute" edge.
func HasAttribute() predicate.Servant {
	return predicate.Servant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AttributeTable, AttributeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttributeWith applies the HasEdge predicate on the "attribute" edge with a given conditions (other predicates).
func HasAttributeWith(preds ...predicate.Attribute) predicate.Servant {
	return predicate.Servant(func(s *sql.Selector) {
		step := newAttributeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderAlignment applies the HasEdge predicate on the "order_alignment" edge.
func HasOrderAlignment() predicate.Servant {
	return predicate.Servant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderAlignmentTable, OrderAlignmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderAlignmentWith applies the HasEdge predicate on the "order_alignment" edge with a given conditions (other predicates).
func HasOrderAlignmentWith(preds ...predicate.OrderAlignment) predicate.Servant {
	return predicate.Servant(func(s *sql.Selector) {
		step := newOrderAlignmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMoralAlignment applies the HasEdge predicate on the "moral_alignment" edge.
func HasMoralAlignment() predicate.Servant {
	return predicate.Servant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MoralAlignmentTable, MoralAlignmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMoralAlignmentWith applies the HasEdge predicate on the "moral_alignment" edge with a given conditions (other predicates).
func HasMoralAlignmentWith(preds ...predicate.MoralAlignment) predicate.Servant {
	return predicate.Servant(func(s *sql.Selector) {
		step := newMoralAlignmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTraits applies the HasEdge predicate on the "traits" edge.
func HasTraits() predicate.Servant {
	return predicate.Servant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TraitsTable, TraitsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTraitsWith applies the HasEdge predicate on the "traits" edge with a given conditions (other predicates).
func HasTraitsWith(preds ...predicate.Trait) predicate.Servant {
	return predicate.Servant(func(s *sql.Selector) {
		step := newTraitsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Servant) predicate.Servant {
	return predicate.Servant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Servant) predicate.Servant {
	return predicate.Servant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Servant) predicate.Servant {
	return predicate.Servant(sql.NotPredicates(p))
}
