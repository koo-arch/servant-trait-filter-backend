// Code generated by ent, DO NOT EDIT.

package servant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the servant type in the database.
	Label = "servant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCollectionNo holds the string denoting the collection_no field in the database.
	FieldCollectionNo = "collection_no"
	// FieldFace holds the string denoting the face field in the database.
	FieldFace = "face"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// EdgeAttribute holds the string denoting the attribute edge name in mutations.
	EdgeAttribute = "attribute"
	// EdgeOrderAlignment holds the string denoting the order_alignment edge name in mutations.
	EdgeOrderAlignment = "order_alignment"
	// EdgeMoralAlignment holds the string denoting the moral_alignment edge name in mutations.
	EdgeMoralAlignment = "moral_alignment"
	// EdgeTraits holds the string denoting the traits edge name in mutations.
	EdgeTraits = "traits"
	// Table holds the table name of the servant in the database.
	Table = "servants"
	// ClassTable is the table that holds the class relation/edge.
	ClassTable = "servants"
	// ClassInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassInverseTable = "classes"
	// ClassColumn is the table column denoting the class relation/edge.
	ClassColumn = "class_servants"
	// AttributeTable is the table that holds the attribute relation/edge.
	AttributeTable = "servants"
	// AttributeInverseTable is the table name for the Attribute entity.
	// It exists in this package in order to avoid circular dependency with the "attribute" package.
	AttributeInverseTable = "attributes"
	// AttributeColumn is the table column denoting the attribute relation/edge.
	AttributeColumn = "attribute_servants"
	// OrderAlignmentTable is the table that holds the order_alignment relation/edge.
	OrderAlignmentTable = "servants"
	// OrderAlignmentInverseTable is the table name for the OrderAlignment entity.
	// It exists in this package in order to avoid circular dependency with the "orderalignment" package.
	OrderAlignmentInverseTable = "order_alignments"
	// OrderAlignmentColumn is the table column denoting the order_alignment relation/edge.
	OrderAlignmentColumn = "order_alignment_servants"
	// MoralAlignmentTable is the table that holds the moral_alignment relation/edge.
	MoralAlignmentTable = "servants"
	// MoralAlignmentInverseTable is the table name for the MoralAlignment entity.
	// It exists in this package in order to avoid circular dependency with the "moralalignment" package.
	MoralAlignmentInverseTable = "moral_alignments"
	// MoralAlignmentColumn is the table column denoting the moral_alignment relation/edge.
	MoralAlignmentColumn = "moral_alignment_servants"
	// TraitsTable is the table that holds the traits relation/edge. The primary key declared below.
	TraitsTable = "trait_servants"
	// TraitsInverseTable is the table name for the Trait entity.
	// It exists in this package in order to avoid circular dependency with the "trait" package.
	TraitsInverseTable = "traits"
)

// Columns holds all SQL columns for servant fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldCollectionNo,
	FieldFace,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "servants"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"attribute_servants",
	"class_servants",
	"moral_alignment_servants",
	"order_alignment_servants",
}

var (
	// TraitsPrimaryKey and TraitsColumn2 are the table columns denoting the
	// primary key for the traits relation (M2M).
	TraitsPrimaryKey = []string{"trait_id", "servant_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CollectionNoValidator is a validator for the "collection_no" field. It is called by the builders before save.
	CollectionNoValidator func(string) error
)

// OrderOption defines the ordering options for the Servant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCollectionNo orders the results by the collection_no field.
func ByCollectionNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollectionNo, opts...).ToFunc()
}

// ByFace orders the results by the face field.
func ByFace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFace, opts...).ToFunc()
}

// ByClassField orders the results by class field.
func ByClassField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassStep(), sql.OrderByField(field, opts...))
	}
}

// ByAttributeField orders the results by attribute field.
func ByAttributeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttributeStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderAlignmentField orders the results by order_alignment field.
func ByOrderAlignmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderAlignmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByMoralAlignmentField orders the results by moral_alignment field.
func ByMoralAlignmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMoralAlignmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByTraitsCount orders the results by traits count.
func ByTraitsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTraitsStep(), opts...)
	}
}

// ByTraits orders the results by traits terms.
func ByTraits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTraitsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClassStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
	)
}
func newAttributeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttributeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AttributeTable, AttributeColumn),
	)
}
func newOrderAlignmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderAlignmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrderAlignmentTable, OrderAlignmentColumn),
	)
}
func newMoralAlignmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MoralAlignmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MoralAlignmentTable, MoralAlignmentColumn),
	)
}
func newTraitsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TraitsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TraitsTable, TraitsPrimaryKey...),
	)
}
