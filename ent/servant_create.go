// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koo-arch/servant-trait-filter-backend/ent/attribute"
	"github.com/koo-arch/servant-trait-filter-backend/ent/class"
	"github.com/koo-arch/servant-trait-filter-backend/ent/moralalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
	"github.com/koo-arch/servant-trait-filter-backend/ent/servant"
	"github.com/koo-arch/servant-trait-filter-backend/ent/trait"
)

// ServantCreate is the builder for creating a Servant entity.
type ServantCreate struct {
	config
	mutation *ServantMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *ServantCreate) SetCreatedAt(t time.Time) *ServantCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ServantCreate) SetNillableCreatedAt(t *time.Time) *ServantCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ServantCreate) SetUpdatedAt(t time.Time) *ServantCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ServantCreate) SetNillableUpdatedAt(t *time.Time) *ServantCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetNameEn sets the "name_en" field.
func (sc *ServantCreate) SetNameEn(s string) *ServantCreate {
	sc.mutation.SetNameEn(s)
	return sc
}

// SetNameJa sets the "name_ja" field.
func (sc *ServantCreate) SetNameJa(s string) *ServantCreate {
	sc.mutation.SetNameJa(s)
	return sc
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (sc *ServantCreate) SetClassID(id int) *ServantCreate {
	sc.mutation.SetClassID(id)
	return sc
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (sc *ServantCreate) SetNillableClassID(id *int) *ServantCreate {
	if id != nil {
		sc = sc.SetClassID(*id)
	}
	return sc
}

// SetClass sets the "class" edge to the Class entity.
func (sc *ServantCreate) SetClass(c *Class) *ServantCreate {
	return sc.SetClassID(c.ID)
}

// SetAttributeID sets the "attribute" edge to the Attribute entity by ID.
func (sc *ServantCreate) SetAttributeID(id int) *ServantCreate {
	sc.mutation.SetAttributeID(id)
	return sc
}

// SetNillableAttributeID sets the "attribute" edge to the Attribute entity by ID if the given value is not nil.
func (sc *ServantCreate) SetNillableAttributeID(id *int) *ServantCreate {
	if id != nil {
		sc = sc.SetAttributeID(*id)
	}
	return sc
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (sc *ServantCreate) SetAttribute(a *Attribute) *ServantCreate {
	return sc.SetAttributeID(a.ID)
}

// SetOrderAlignmentID sets the "order_alignment" edge to the OrderAlignment entity by ID.
func (sc *ServantCreate) SetOrderAlignmentID(id int) *ServantCreate {
	sc.mutation.SetOrderAlignmentID(id)
	return sc
}

// SetNillableOrderAlignmentID sets the "order_alignment" edge to the OrderAlignment entity by ID if the given value is not nil.
func (sc *ServantCreate) SetNillableOrderAlignmentID(id *int) *ServantCreate {
	if id != nil {
		sc = sc.SetOrderAlignmentID(*id)
	}
	return sc
}

// SetOrderAlignment sets the "order_alignment" edge to the OrderAlignment entity.
func (sc *ServantCreate) SetOrderAlignment(o *OrderAlignment) *ServantCreate {
	return sc.SetOrderAlignmentID(o.ID)
}

// SetMoralAlignmentID sets the "moral_alignment" edge to the MoralAlignment entity by ID.
func (sc *ServantCreate) SetMoralAlignmentID(id int) *ServantCreate {
	sc.mutation.SetMoralAlignmentID(id)
	return sc
}

// SetNillableMoralAlignmentID sets the "moral_alignment" edge to the MoralAlignment entity by ID if the given value is not nil.
func (sc *ServantCreate) SetNillableMoralAlignmentID(id *int) *ServantCreate {
	if id != nil {
		sc = sc.SetMoralAlignmentID(*id)
	}
	return sc
}

// SetMoralAlignment sets the "moral_alignment" edge to the MoralAlignment entity.
func (sc *ServantCreate) SetMoralAlignment(m *MoralAlignment) *ServantCreate {
	return sc.SetMoralAlignmentID(m.ID)
}

// AddTraitIDs adds the "traits" edge to the Trait entity by IDs.
func (sc *ServantCreate) AddTraitIDs(ids ...int) *ServantCreate {
	sc.mutation.AddTraitIDs(ids...)
	return sc
}

// AddTraits adds the "traits" edges to the Trait entity.
func (sc *ServantCreate) AddTraits(t ...*Trait) *ServantCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTraitIDs(ids...)
}

// Mutation returns the ServantMutation object of the builder.
func (sc *ServantCreate) Mutation() *ServantMutation {
	return sc.mutation
}

// Save creates the Servant in the database.
func (sc *ServantCreate) Save(ctx context.Context) (*Servant, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServantCreate) SaveX(ctx context.Context) *Servant {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ServantCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ServantCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ServantCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := servant.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := servant.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ServantCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Servant.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Servant.updated_at"`)}
	}
	if _, ok := sc.mutation.NameEn(); !ok {
		return &ValidationError{Name: "name_en", err: errors.New(`ent: missing required field "Servant.name_en"`)}
	}
	if v, ok := sc.mutation.NameEn(); ok {
		if err := servant.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "Servant.name_en": %w`, err)}
		}
	}
	if _, ok := sc.mutation.NameJa(); !ok {
		return &ValidationError{Name: "name_ja", err: errors.New(`ent: missing required field "Servant.name_ja"`)}
	}
	return nil
}

func (sc *ServantCreate) sqlSave(ctx context.Context) (*Servant, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ServantCreate) createSpec() (*Servant, *sqlgraph.CreateSpec) {
	var (
		_node = &Servant{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(servant.Table, sqlgraph.NewFieldSpec(servant.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(servant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(servant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.NameEn(); ok {
		_spec.SetField(servant.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if value, ok := sc.mutation.NameJa(); ok {
		_spec.SetField(servant.FieldNameJa, field.TypeString, value)
		_node.NameJa = value
	}
	if nodes := sc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.ClassTable,
			Columns: []string{servant.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.class_servants = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.AttributeTable,
			Columns: []string{servant.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.attribute_servants = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OrderAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.OrderAlignmentTable,
			Columns: []string{servant.OrderAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_alignment_servants = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.MoralAlignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servant.MoralAlignmentTable,
			Columns: []string{servant.MoralAlignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moralalignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.moral_alignment_servants = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TraitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   servant.TraitsTable,
			Columns: servant.TraitsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trait.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServantCreateBulk is the builder for creating many Servant entities in bulk.
type ServantCreateBulk struct {
	config
	err      error
	builders []*ServantCreate
}

// Save creates the Servant entities in the database.
func (scb *ServantCreateBulk) Save(ctx context.Context) ([]*Servant, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Servant, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ServantCreateBulk) SaveX(ctx context.Context) []*Servant {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ServantCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ServantCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
