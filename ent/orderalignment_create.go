// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koo-arch/servant-trait-filter-backend/ent/ascension"
	"github.com/koo-arch/servant-trait-filter-backend/ent/orderalignment"
)

// OrderAlignmentCreate is the builder for creating a OrderAlignment entity.
type OrderAlignmentCreate struct {
	config
	mutation *OrderAlignmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oac *OrderAlignmentCreate) SetCreatedAt(t time.Time) *OrderAlignmentCreate {
	oac.mutation.SetCreatedAt(t)
	return oac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oac *OrderAlignmentCreate) SetNillableCreatedAt(t *time.Time) *OrderAlignmentCreate {
	if t != nil {
		oac.SetCreatedAt(*t)
	}
	return oac
}

// SetUpdatedAt sets the "updated_at" field.
func (oac *OrderAlignmentCreate) SetUpdatedAt(t time.Time) *OrderAlignmentCreate {
	oac.mutation.SetUpdatedAt(t)
	return oac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oac *OrderAlignmentCreate) SetNillableUpdatedAt(t *time.Time) *OrderAlignmentCreate {
	if t != nil {
		oac.SetUpdatedAt(*t)
	}
	return oac
}

// SetNameEn sets the "name_en" field.
func (oac *OrderAlignmentCreate) SetNameEn(s string) *OrderAlignmentCreate {
	oac.mutation.SetNameEn(s)
	return oac
}

// SetNameJa sets the "name_ja" field.
func (oac *OrderAlignmentCreate) SetNameJa(s string) *OrderAlignmentCreate {
	oac.mutation.SetNameJa(s)
	return oac
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (oac *OrderAlignmentCreate) SetNillableNameJa(s *string) *OrderAlignmentCreate {
	if s != nil {
		oac.SetNameJa(*s)
	}
	return oac
}

// SetID sets the "id" field.
func (oac *OrderAlignmentCreate) SetID(i int) *OrderAlignmentCreate {
	oac.mutation.SetID(i)
	return oac
}

// AddAscensionIDs adds the "ascensions" edge to the Ascension entity by IDs.
func (oac *OrderAlignmentCreate) AddAscensionIDs(ids ...int) *OrderAlignmentCreate {
	oac.mutation.AddAscensionIDs(ids...)
	return oac
}

// AddAscensions adds the "ascensions" edges to the Ascension entity.
func (oac *OrderAlignmentCreate) AddAscensions(a ...*Ascension) *OrderAlignmentCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return oac.AddAscensionIDs(ids...)
}

// Mutation returns the OrderAlignmentMutation object of the builder.
func (oac *OrderAlignmentCreate) Mutation() *OrderAlignmentMutation {
	return oac.mutation
}

// Save creates the OrderAlignment in the database.
func (oac *OrderAlignmentCreate) Save(ctx context.Context) (*OrderAlignment, error) {
	oac.defaults()
	return withHooks(ctx, oac.sqlSave, oac.mutation, oac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oac *OrderAlignmentCreate) SaveX(ctx context.Context) *OrderAlignment {
	v, err := oac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oac *OrderAlignmentCreate) Exec(ctx context.Context) error {
	_, err := oac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oac *OrderAlignmentCreate) ExecX(ctx context.Context) {
	if err := oac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oac *OrderAlignmentCreate) defaults() {
	if _, ok := oac.mutation.CreatedAt(); !ok {
		v := orderalignment.DefaultCreatedAt()
		oac.mutation.SetCreatedAt(v)
	}
	if _, ok := oac.mutation.UpdatedAt(); !ok {
		v := orderalignment.DefaultUpdatedAt()
		oac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oac *OrderAlignmentCreate) check() error {
	if _, ok := oac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderAlignment.created_at"`)}
	}
	if _, ok := oac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderAlignment.updated_at"`)}
	}
	if _, ok := oac.mutation.NameEn(); !ok {
		return &ValidationError{Name: "name_en", err: errors.New(`ent: missing required field "OrderAlignment.name_en"`)}
	}
	if v, ok := oac.mutation.NameEn(); ok {
		if err := orderalignment.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "OrderAlignment.name_en": %w`, err)}
		}
	}
	if v, ok := oac.mutation.ID(); ok {
		if err := orderalignment.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "OrderAlignment.id": %w`, err)}
		}
	}
	return nil
}

func (oac *OrderAlignmentCreate) sqlSave(ctx context.Context) (*OrderAlignment, error) {
	if err := oac.check(); err != nil {
		return nil, err
	}
	_node, _spec := oac.createSpec()
	if err := sqlgraph.CreateNode(ctx, oac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	oac.mutation.id = &_node.ID
	oac.mutation.done = true
	return _node, nil
}

func (oac *OrderAlignmentCreate) createSpec() (*OrderAlignment, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderAlignment{config: oac.config}
		_spec = sqlgraph.NewCreateSpec(orderalignment.Table, sqlgraph.NewFieldSpec(orderalignment.FieldID, field.TypeInt))
	)
	_spec.OnConflict = oac.conflict
	if id, ok := oac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oac.mutation.CreatedAt(); ok {
		_spec.SetField(orderalignment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oac.mutation.UpdatedAt(); ok {
		_spec.SetField(orderalignment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oac.mutation.NameEn(); ok {
		_spec.SetField(orderalignment.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if value, ok := oac.mutation.NameJa(); ok {
		_spec.SetField(orderalignment.FieldNameJa, field.TypeString, value)
		_node.NameJa = value
	}
	if nodes := oac.mutation.AscensionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderalignment.AscensionsTable,
			Columns: []string{orderalignment.AscensionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ascension.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderAlignment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderAlignmentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oac *OrderAlignmentCreate) OnConflict(opts ...sql.ConflictOption) *OrderAlignmentUpsertOne {
	oac.conflict = opts
	return &OrderAlignmentUpsertOne{
		create: oac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderAlignment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oac *OrderAlignmentCreate) OnConflictColumns(columns ...string) *OrderAlignmentUpsertOne {
	oac.conflict = append(oac.conflict, sql.ConflictColumns(columns...))
	return &OrderAlignmentUpsertOne{
		create: oac,
	}
}

type (
	// OrderAlignmentUpsertOne is the builder for "upsert"-ing
	//  one OrderAlignment node.
	OrderAlignmentUpsertOne struct {
		create *OrderAlignmentCreate
	}

	// OrderAlignmentUpsert is the "OnConflict" setter.
	OrderAlignmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderAlignmentUpsert) SetUpdatedAt(v time.Time) *OrderAlignmentUpsert {
	u.Set(orderalignment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderAlignmentUpsert) UpdateUpdatedAt() *OrderAlignmentUpsert {
	u.SetExcluded(orderalignment.FieldUpdatedAt)
	return u
}

// SetNameEn sets the "name_en" field.
func (u *OrderAlignmentUpsert) SetNameEn(v string) *OrderAlignmentUpsert {
	u.Set(orderalignment.FieldNameEn, v)
	return u
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *OrderAlignmentUpsert) UpdateNameEn() *OrderAlignmentUpsert {
	u.SetExcluded(orderalignment.FieldNameEn)
	return u
}

// SetNameJa sets the "name_ja" field.
func (u *OrderAlignmentUpsert) SetNameJa(v string) *OrderAlignmentUpsert {
	u.Set(orderalignment.FieldNameJa, v)
	return u
}

// UpdateNameJa sets the "name_ja" field to the value that was provided on create.
func (u *OrderAlignmentUpsert) UpdateNameJa() *OrderAlignmentUpsert {
	u.SetExcluded(orderalignment.FieldNameJa)
	return u
}

// ClearNameJa clears the value of the "name_ja" field.
func (u *OrderAlignmentUpsert) ClearNameJa() *OrderAlignmentUpsert {
	u.SetNull(orderalignment.FieldNameJa)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderAlignment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderalignment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderAlignmentUpsertOne) UpdateNewValues() *OrderAlignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderalignment.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orderalignment.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderAlignment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderAlignmentUpsertOne) Ignore() *OrderAlignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderAlignmentUpsertOne) DoNothing() *OrderAlignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderAlignmentCreate.OnConflict
// documentation for more info.
func (u *OrderAlignmentUpsertOne) Update(set func(*OrderAlignmentUpsert)) *OrderAlignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderAlignmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderAlignmentUpsertOne) SetUpdatedAt(v time.Time) *OrderAlignmentUpsertOne {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderAlignmentUpsertOne) UpdateUpdatedAt() *OrderAlignmentUpsertOne {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetNameEn sets the "name_en" field.
func (u *OrderAlignmentUpsertOne) SetNameEn(v string) *OrderAlignmentUpsertOne {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *OrderAlignmentUpsertOne) UpdateNameEn() *OrderAlignmentUpsertOne {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.UpdateNameEn()
	})
}

// SetNameJa sets the "name_ja" field.
func (u *OrderAlignmentUpsertOne) SetNameJa(v string) *OrderAlignmentUpsertOne {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.SetNameJa(v)
	})
}

// UpdateNameJa sets the "name_ja" field to the value that was provided on create.
func (u *OrderAlignmentUpsertOne) UpdateNameJa() *OrderAlignmentUpsertOne {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.UpdateNameJa()
	})
}

// ClearNameJa clears the value of the "name_ja" field.
func (u *OrderAlignmentUpsertOne) ClearNameJa() *OrderAlignmentUpsertOne {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.ClearNameJa()
	})
}

// Exec executes the query.
func (u *OrderAlignmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderAlignmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderAlignmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderAlignmentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderAlignmentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderAlignmentCreateBulk is the builder for creating many OrderAlignment entities in bulk.
type OrderAlignmentCreateBulk struct {
	config
	err      error
	builders []*OrderAlignmentCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderAlignment entities in the database.
func (oacb *OrderAlignmentCreateBulk) Save(ctx context.Context) ([]*OrderAlignment, error) {
	if oacb.err != nil {
		return nil, oacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oacb.builders))
	nodes := make([]*OrderAlignment, len(oacb.builders))
	mutators := make([]Mutator, len(oacb.builders))
	for i := range oacb.builders {
		func(i int, root context.Context) {
			builder := oacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderAlignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oacb *OrderAlignmentCreateBulk) SaveX(ctx context.Context) []*OrderAlignment {
	v, err := oacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacb *OrderAlignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := oacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacb *OrderAlignmentCreateBulk) ExecX(ctx context.Context) {
	if err := oacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderAlignment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderAlignmentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oacb *OrderAlignmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderAlignmentUpsertBulk {
	oacb.conflict = opts
	return &OrderAlignmentUpsertBulk{
		create: oacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderAlignment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oacb *OrderAlignmentCreateBulk) OnConflictColumns(columns ...string) *OrderAlignmentUpsertBulk {
	oacb.conflict = append(oacb.conflict, sql.ConflictColumns(columns...))
	return &OrderAlignmentUpsertBulk{
		create: oacb,
	}
}

// OrderAlignmentUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderAlignment nodes.
type OrderAlignmentUpsertBulk struct {
	create *OrderAlignmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderAlignment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderalignment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderAlignmentUpsertBulk) UpdateNewValues() *OrderAlignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderalignment.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orderalignment.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderAlignment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderAlignmentUpsertBulk) Ignore() *OrderAlignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderAlignmentUpsertBulk) DoNothing() *OrderAlignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderAlignmentCreateBulk.OnConflict
// documentation for more info.
func (u *OrderAlignmentUpsertBulk) Update(set func(*OrderAlignmentUpsert)) *OrderAlignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderAlignmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderAlignmentUpsertBulk) SetUpdatedAt(v time.Time) *OrderAlignmentUpsertBulk {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderAlignmentUpsertBulk) UpdateUpdatedAt() *OrderAlignmentUpsertBulk {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetNameEn sets the "name_en" field.
func (u *OrderAlignmentUpsertBulk) SetNameEn(v string) *OrderAlignmentUpsertBulk {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *OrderAlignmentUpsertBulk) UpdateNameEn() *OrderAlignmentUpsertBulk {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.UpdateNameEn()
	})
}

// SetNameJa sets the "name_ja" field.
func (u *OrderAlignmentUpsertBulk) SetNameJa(v string) *OrderAlignmentUpsertBulk {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.SetNameJa(v)
	})
}

// UpdateNameJa sets the "name_ja" field to the value that was provided on create.
func (u *OrderAlignmentUpsertBulk) UpdateNameJa() *OrderAlignmentUpsertBulk {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.UpdateNameJa()
	})
}

// ClearNameJa clears the value of the "name_ja" field.
func (u *OrderAlignmentUpsertBulk) ClearNameJa() *OrderAlignmentUpsertBulk {
	return u.Update(func(s *OrderAlignmentUpsert) {
		s.ClearNameJa()
	})
}

// Exec executes the query.
func (u *OrderAlignmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderAlignmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderAlignmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderAlignmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
